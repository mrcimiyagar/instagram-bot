{"ast":null,"code":"import _classCallCheck from \"/home/keyhan/projects/js/InstaAiBot/ClientApp/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/keyhan/projects/js/InstaAiBot/ClientApp/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/keyhan/projects/js/InstaAiBot/ClientApp/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/keyhan/projects/js/InstaAiBot/ClientApp/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/keyhan/projects/js/InstaAiBot/ClientApp/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/keyhan/projects/js/InstaAiBot/ClientApp/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/keyhan/projects/js/InstaAiBot/ClientApp/src/layouts/AuthPage.js\";\nimport React, { Component } from 'react';\nimport LoginButton from \"./controls/Buttons\";\nimport Container from \"@material-ui/core/Container\";\nimport { Box } from \"@material-ui/core\";\nimport Card from \"@material-ui/core/Card\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport IconButton from '@material-ui/core/IconButton';\nimport PersonIcon from '@material-ui/icons/Person';\nimport clsx from \"clsx\";\nimport { Grade, Visibility, VisibilityOff } from \"@material-ui/icons\";\nimport { blue, lightBlue, green, red, yellow, purple, grey } from \"@material-ui/core/colors\";\nimport VpnKeyIcon from '@material-ui/icons/VpnKey';\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Link from \"@material-ui/core/Link\";\nimport { AnimatedRotation, AnimatedPosition } from 'react-declare-animate';\nimport PhoneIcon from '@material-ui/icons/Phone';\nimport TextFormatIcon from '@material-ui/icons/TextFormat';\nimport EmailIcon from '@material-ui/icons/Email';\nimport Animate from \"react-smooth\";\nimport GraphicsHandler from './handlers/GraphicsHandler';\nimport Redirect from \"react-router-dom/Redirect\";\nimport Center from 'react-center';\nimport PropTypes from \"prop-types\";\nimport withStyles from \"@material-ui/core/styles/withStyles\";\nimport TextBox from \"./controls/TextBox\";\nimport posed from 'react-pose';\nvar LoginBox = posed.div({\n  visible: {\n    opacity: 1\n  },\n  hidden: {\n    opacity: 0\n  }\n});\nvar classes = {};\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {\n      display: 'flex',\n      flexWrap: 'wrap'\n    },\n    margin: {\n      margin: theme.spacing(1)\n    },\n    textField: {\n      flexBasis: 200\n    }\n  };\n});\nvar inClasses = {\n  rootInput: {\n    background: 'transparent'\n  }\n};\n\nfunction StylePreparer(props) {\n  classes = useStyles();\n  return React.createElement(Box, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  });\n}\n\nvar AuthPage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AuthPage, _Component);\n\n  function AuthPage(props) {\n    var _this;\n\n    _classCallCheck(this, AuthPage);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AuthPage).call(this, props));\n    _this.mobileWidth = 700;\n    _this.state = {\n      loading: 0,\n      signupForCardAngles: false,\n      signupForFormItems: false,\n      forecasts: [],\n      resizeTrigger: false,\n      showPassword: false,\n      goHome: false\n    };\n    document.body.style.overflowX = 'hidden';\n    document.body.style.overflowY = 'hidden';\n    GraphicsHandler.instance = new GraphicsHandler();\n    _this.scrollTopTargetRef = React.createRef();\n    _this.loadingViewRef = React.createRef();\n    _this.updateWindowDimensions = _this.updateWindowDimensions.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleScrollReset = _this.handleScrollReset.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.forceScrollReset = _this.forceScrollReset.bind(_assertThisInitialized(_assertThisInitialized(_this))); // setTimeout(() => {\n    //     this.setState({loading: 1});\n    //     setTimeout(() => {\n    //         this.setState({loading: 2});\n    //         setTimeout(() => {\n    //             this.setState({loading: 3});\n    //             if (GraphicsHandler.instance.isLongMobileScreen()) {\n    //                 document.body.style.overflowY = 'hidden';\n    //                 this.forceScrollReset();\n    //             } else\n    //                 document.body.style.overflowY = 'auto';\n    //         }, 1250);\n    //     }, 3000);\n    // }, 1500);\n\n    return _this;\n  }\n\n  _createClass(AuthPage, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.updateWindowDimensions();\n      window.addEventListener('resize', this.updateWindowDimensions);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener('resize', this.updateWindowDimensions);\n    }\n  }, {\n    key: \"updateWindowDimensions\",\n    value: function updateWindowDimensions() {\n      GraphicsHandler.instance.width = window.innerWidth / GraphicsHandler.instance.density;\n      GraphicsHandler.instance.height = window.innerHeight / GraphicsHandler.instance.density;\n      this.setState({\n        resizeTrigger: !this.state.resizeTrigger\n      });\n    }\n  }, {\n    key: \"measureAuthCardHeight\",\n    value: function measureAuthCardHeight() {\n      if (this.state.loading >= 3) {\n        if (GraphicsHandler.instance.isLongMobileScreen()) {\n          document.body.style.overflowY = 'hidden';\n          this.forceScrollReset();\n        } else document.body.style.overflowY = 'auto';\n      }\n\n      return GraphicsHandler.instance.isMobileScreen() ? this.state.signupForFormItems ? '17cm' : '10cm' : this.state.signupForFormItems ? GraphicsHandler.instance.dpToPx(400) : GraphicsHandler.instance.dpToPx(350);\n    }\n  }, {\n    key: \"measureAuthCardWidth\",\n    value: function measureAuthCardWidth() {\n      return GraphicsHandler.instance.isMobileScreen() ? GraphicsHandler.instance.isWideMobileScreen() ? GraphicsHandler.instance.dpToPx(GraphicsHandler.instance.width) / 2 : GraphicsHandler.instance.dpToPx(GraphicsHandler.instance.width) * 4 / 5 : GraphicsHandler.instance.dpToPx(700);\n    }\n  }, {\n    key: \"handleScrollReset\",\n    value: function handleScrollReset() {\n      if (this.state.loading === 1) {\n        window.scrollTo(0, 0);\n      }\n    }\n  }, {\n    key: \"forceScrollReset\",\n    value: function forceScrollReset() {\n      window.scrollTo(0, 0);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      if (this.state.goHome) {\n        return React.createElement(Redirect, {\n          to: \"/Home\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 155\n          },\n          __self: this\n        });\n      }\n\n      if (classes === undefined) {\n        setTimeout(function () {\n          _this2.forceUpdate();\n        }, 500);\n        return React.createElement(StylePreparer, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 162\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(\"div\", {\n        style: {\n          width: '100%',\n          height: '100vh'\n        },\n        onLoadStart: this.handleScrollReset(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        ref: this.scrollTopTargetRef,\n        style: {\n          width: '0px',\n          height: '0px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        style: {\n          position: 'relative'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }, React.createElement(Animate, {\n        isActive: this.state.loading === 2,\n        duration: 2000,\n        to: \"0\",\n        from: \"1\",\n        attributeName: \"opacity\",\n        style: {\n          position: 'absolute',\n          margin: 0\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, React.createElement(Box, {\n        style: {\n          opacity: 1,\n          width: '100%',\n          height: '100%',\n          backgroundColor: '#000',\n          position: 'absolute',\n          margin: 0\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      })), React.createElement(Animate, {\n        isActive: this.state.loading > 0,\n        duration: 2500,\n        to: this.state.loading === 1 ? 1 : 0,\n        from: this.state.loading === 1 ? 0 : 1,\n        attributeName: \"opacity\",\n        style: {\n          position: 'absolute',\n          margin: 0\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }, React.createElement(Box, {\n        style: {\n          width: '100%',\n          height: '100vh',\n          position: 'absolute',\n          margin: 0,\n          opacity: 0,\n          marginTop: function () {\n            if (_this2.loadingViewRef.current === null) return 0;else {\n              return (GraphicsHandler.instance.dpToPx(GraphicsHandler.instance.height) - _this2.loadingViewRef.current.clientHeight) / 2;\n            }\n          }()\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }, React.createElement(Center, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }, React.createElement(Box, {\n        ref: this.loadingViewRef,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      }, React.createElement(Center, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219\n        },\n        __self: this\n      }), React.createElement(\"h4\", {\n        style: {\n          color: '#fff',\n          width: '100%',\n          height: '100%',\n          marginTop: 56,\n          textAlign: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      }, \"Welcome to Hormoz platform\")))))), React.createElement(Center, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235\n        },\n        __self: this\n      }, React.createElement(LoginBox, {\n        duration: 1500,\n        top: this.state.loading < 3 || this.state.loading > 3 ? GraphicsHandler.instance.height * 1.5 : GraphicsHandler.instance.isMobileScreen() ? Math.max(2, GraphicsHandler.instance.isLongMobileScreen() ? GraphicsHandler.instance.cmHeight * 20 / 100 : GraphicsHandler.instance.cmHeight * 10 / 100) + 'cm' : Math.max(72, (GraphicsHandler.instance.dpToPx(GraphicsHandler.instance.height) - GraphicsHandler.instance.dpToPx(this.measureAuthCardHeight())) / 2),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236\n        },\n        __self: this\n      }, React.createElement(AnimatedRotation, {\n        duration: 2500,\n        angleX: this.state.signupForCardAngles ? 3.14 : 0,\n        angleY: this.state.signupForCardAngles ? 3.14 : 0,\n        angleZ: this.state.signupForCardAngles ? 3.14 : 0,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246\n        },\n        __self: this\n      }, React.createElement(Animate, {\n        isActive: this.state.loading >= 3,\n        duration: 1500,\n        to: this.state.loading === 3 ? 1 : 0,\n        from: this.state.loading === 3 ? 0 : 1,\n        attributeName: \"opacity\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251\n        },\n        __self: this\n      }, React.createElement(Box, {\n        width: this.measureAuthCardWidth(),\n        style: {\n          opacity: 0\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256\n        },\n        __self: this\n      }, React.createElement(Card, {\n        width: this.measureAuthCardWidth(),\n        style: {\n          borderRadius: '12px 12px 12px 12px',\n          zIndex: '2',\n          backdropFilter: 'blur(10px)',\n          background: GraphicsHandler.instance.mainGradient(0.45)\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261\n        },\n        __self: this\n      }, React.createElement(Box, {\n        width: '100%',\n        height: this.measureAuthCardHeight(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269\n        },\n        __self: this\n      }, React.createElement(Box, {\n        width: GraphicsHandler.instance.isMobileScreen() ? '100%' : '49%',\n        height: this.measureAuthCardHeight(),\n        style: {\n          float: 'left'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280\n        },\n        __self: this\n      }, React.createElement(Center, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 281\n        },\n        __self: this\n      }, React.createElement(TextBox, {\n        label: \"Username\",\n        InputLabelProps: {\n          style: {\n            color: '#fff'\n          }\n        },\n        style: {\n          width: '80%',\n          marginTop: '56px',\n          '& .MuiInput-underline': {\n            borderBottomColor: 'green',\n            color: 'green'\n          }\n        },\n        InputProps: {\n          startAdornment: React.createElement(\"div\", {\n            style: {\n              width: '48px'\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 299\n            },\n            __self: this\n          }, React.createElement(PersonIcon, {\n            component: function component(svgProps) {\n              return React.createElement(\"svg\", Object.assign({}, svgProps, {\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 303\n                },\n                __self: this\n              }), React.createElement(\"defs\", {\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 304\n                },\n                __self: this\n              }, React.createElement(\"linearGradient\", {\n                id: \"gradient1\",\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 305\n                },\n                __self: this\n              }, React.createElement(\"stop\", {\n                offset: \"30%\",\n                stopColor: blue[400],\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 307\n                },\n                __self: this\n              }), React.createElement(\"stop\", {\n                offset: \"70%\",\n                stopColor: red[400],\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 309\n                },\n                __self: this\n              }))), React.cloneElement(svgProps.children[0], {\n                fill: 'url(#gradient1)'\n              }));\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 300\n            },\n            __self: this\n          }))\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 282\n        },\n        __self: this\n      })), React.createElement(Center, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 324\n        },\n        __self: this\n      }, React.createElement(TextBox, {\n        id: \"outlined-adornment-password\",\n        className: clsx(classes.margin, classes.textField),\n        type: this.state.showPassword ? 'text' : 'password',\n        label: \"Password\",\n        InputLabelProps: {\n          style: {\n            color: '#fff'\n          }\n        },\n        style: {\n          width: '80%',\n          marginTop: '24px'\n        },\n        InputProps: {\n          startAdornment: React.createElement(\"div\", {\n            style: {\n              width: '48px'\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 338\n            },\n            __self: this\n          }, React.createElement(VpnKeyIcon, {\n            component: function component(svgProps) {\n              return React.createElement(\"svg\", Object.assign({}, svgProps, {\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 342\n                },\n                __self: this\n              }), React.createElement(\"defs\", {\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 343\n                },\n                __self: this\n              }, React.createElement(\"linearGradient\", {\n                id: \"gradient2\",\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 344\n                },\n                __self: this\n              }, React.createElement(\"stop\", {\n                offset: \"30%\",\n                stopColor: green[400],\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 346\n                },\n                __self: this\n              }), React.createElement(\"stop\", {\n                offset: \"70%\",\n                stopColor: yellow[600],\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 348\n                },\n                __self: this\n              }))), React.cloneElement(svgProps.children[0], {\n                fill: 'url(#gradient2)'\n              }));\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 339\n            },\n            __self: this\n          })),\n          endAdornment: React.createElement(\"div\", {\n            style: {\n              width: '48px'\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 361\n            },\n            __self: this\n          }, React.createElement(IconButton, {\n            href: '',\n            style: {\n              outline: 'none'\n            },\n            onClick: function onClick() {\n              _this2.setState({\n                showPassword: !_this2.state.showPassword\n              });\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 362\n            },\n            __self: this\n          }, this.state.showPassword ? React.createElement(Visibility, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 369\n            },\n            __self: this\n          }) : React.createElement(VisibilityOff, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 370\n            },\n            __self: this\n          })))\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 325\n        },\n        __self: this\n      })), React.createElement(Container, {\n        hidden: !this.state.signupForFormItems || GraphicsHandler.instance.width > this.mobileWidth,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 377\n        },\n        __self: this\n      }, React.createElement(Center, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 379\n        },\n        __self: this\n      }, React.createElement(TextField, {\n        className: clsx(classes.margin, classes.textField),\n        label: \"Email\",\n        style: {\n          marginTop: '24px'\n        },\n        InputProps: {\n          startAdornment: React.createElement(\"div\", {\n            style: {\n              width: '48px'\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 386\n            },\n            __self: this\n          }, React.createElement(EmailIcon, {\n            component: function component(svgProps) {\n              return React.createElement(\"svg\", Object.assign({}, svgProps, {\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 390\n                },\n                __self: this\n              }), React.createElement(\"defs\", {\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 391\n                },\n                __self: this\n              }, React.createElement(\"linearGradient\", {\n                id: \"gradient7\",\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 392\n                },\n                __self: this\n              }, React.createElement(\"stop\", {\n                offset: \"30%\",\n                stopColor: purple[400],\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 394\n                },\n                __self: this\n              }), React.createElement(\"stop\", {\n                offset: \"70%\",\n                stopColor: grey[400],\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 397\n                },\n                __self: this\n              }))), React.cloneElement(svgProps.children[0], {\n                fill: 'url(#gradient7)'\n              }));\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 387\n            },\n            __self: this\n          }))\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 380\n        },\n        __self: this\n      })), React.createElement(Center, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 413\n        },\n        __self: this\n      }, React.createElement(TextField, {\n        id: \"outlined-adornment-password\",\n        className: clsx(classes.margin, classes.textField),\n        label: \"FirstName\",\n        style: {\n          marginTop: '24px'\n        },\n        InputProps: {\n          startAdornment: React.createElement(\"div\", {\n            style: {\n              width: '48px'\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 421\n            },\n            __self: this\n          }, React.createElement(TextFormatIcon, {\n            component: function component(svgProps) {\n              return React.createElement(\"svg\", Object.assign({}, svgProps, {\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 425\n                },\n                __self: this\n              }), React.createElement(\"defs\", {\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 426\n                },\n                __self: this\n              }, React.createElement(\"linearGradient\", {\n                id: \"gradient8\",\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 427\n                },\n                __self: this\n              }, React.createElement(\"stop\", {\n                offset: \"30%\",\n                stopColor: purple[400],\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 429\n                },\n                __self: this\n              }), React.createElement(\"stop\", {\n                offset: \"70%\",\n                stopColor: grey[400],\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 432\n                },\n                __self: this\n              }))), React.cloneElement(svgProps.children[0], {\n                fill: 'url(#gradient8)'\n              }));\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 422\n            },\n            __self: this\n          }))\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 414\n        },\n        __self: this\n      })), React.createElement(Center, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 448\n        },\n        __self: this\n      }, React.createElement(TextField, {\n        id: \"outlined-adornment-password\",\n        className: clsx(classes.margin, classes.textField),\n        label: \"LastName\",\n        style: {\n          marginTop: '24px'\n        },\n        InputProps: {\n          startAdornment: React.createElement(\"div\", {\n            style: {\n              width: '48px'\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 456\n            },\n            __self: this\n          }, React.createElement(TextFormatIcon, {\n            component: function component(svgProps) {\n              return React.createElement(\"svg\", Object.assign({}, svgProps, {\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 460\n                },\n                __self: this\n              }), React.createElement(\"defs\", {\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 461\n                },\n                __self: this\n              }, React.createElement(\"linearGradient\", {\n                id: \"gradient9\",\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 462\n                },\n                __self: this\n              }, React.createElement(\"stop\", {\n                offset: \"30%\",\n                stopColor: purple[400],\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 464\n                },\n                __self: this\n              }), React.createElement(\"stop\", {\n                offset: \"70%\",\n                stopColor: grey[400],\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 467\n                },\n                __self: this\n              }))), React.cloneElement(svgProps.children[0], {\n                fill: 'url(#gradient9)'\n              }));\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 457\n            },\n            __self: this\n          }))\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 449\n        },\n        __self: this\n      })), React.createElement(Center, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 483\n        },\n        __self: this\n      }, React.createElement(TextField, {\n        id: \"outlined-adornment-password\",\n        className: clsx(classes.margin, classes.textField),\n        label: \"Phone\",\n        style: {\n          marginTop: '24px'\n        },\n        InputProps: {\n          startAdornment: React.createElement(\"div\", {\n            style: {\n              width: '48px'\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 491\n            },\n            __self: this\n          }, React.createElement(PhoneIcon, {\n            component: function component(svgProps) {\n              return React.createElement(\"svg\", Object.assign({}, svgProps, {\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 495\n                },\n                __self: this\n              }), React.createElement(\"defs\", {\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 496\n                },\n                __self: this\n              }, React.createElement(\"linearGradient\", {\n                id: \"gradient10\",\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 497\n                },\n                __self: this\n              }, React.createElement(\"stop\", {\n                offset: \"30%\",\n                stopColor: purple[400],\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 499\n                },\n                __self: this\n              }), React.createElement(\"stop\", {\n                offset: \"70%\",\n                stopColor: grey[400],\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 502\n                },\n                __self: this\n              }))), React.cloneElement(svgProps.children[0], {\n                fill: 'url(#gradient10)'\n              }));\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 492\n            },\n            __self: this\n          }))\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 484\n        },\n        __self: this\n      })))), React.createElement(Container, {\n        hidden: this.state.signupForFormItems,\n        height: '32px',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 520\n        },\n        __self: this\n      }, React.createElement(Center, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 521\n        },\n        __self: this\n      }, React.createElement(Box, {\n        height: '32px',\n        style: {\n          width: '80%',\n          marginTop: '12px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 522\n        },\n        __self: this\n      }, React.createElement(FormControlLabel, {\n        style: {\n          color: '#fff'\n        },\n        control: React.createElement(Checkbox, {\n          style: {\n            color: '#fff'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 529\n          },\n          __self: this\n        }),\n        label: \"Remember password\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 524\n        },\n        __self: this\n      })))), React.createElement(Center, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 537\n        },\n        __self: this\n      }, React.createElement(Box, {\n        marginTop: '2em',\n        style: {\n          width: '80%'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 538\n        },\n        __self: this\n      }, React.createElement(Link, {\n        style: {\n          color: '#fff'\n        },\n        component: \"button\",\n        variant: \"body2\",\n        onClick: function onClick() {\n          var currState = _this2.state.signupForCardAngles;\n          currState = !currState;\n\n          _this2.setState({\n            signupForCardAngles: !_this2.state.signupForCardAngles\n          });\n\n          if (GraphicsHandler.instance.isMobileScreen() && !currState) {\n            _this2.scrollTopTargetRef.current.scrollIntoView({\n              behavior: 'smooth'\n            });\n          }\n\n          setTimeout(function () {\n            _this2.setState({\n              signupForFormItems: !_this2.state.signupForFormItems\n            });\n\n            if (GraphicsHandler.instance.isMobileScreen() && _this2.state.signupForFormItems) {\n              document.body.style.overflowY = 'auto';\n            } else {\n              if (GraphicsHandler.instance.isLongMobileScreen()) {\n                document.body.style.overflowY = 'hidden';\n\n                _this2.forceScrollReset();\n              } else document.body.style.overflowY = 'auto';\n            }\n          }, 700);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 541\n        },\n        __self: this\n      }, this.state.signupForFormItems ? 'Already have an account ?' : 'Dont you have an account ?')))), React.createElement(Container, {\n        width: '1px',\n        height: this.signupForFormItems ? this.measureAuthCardHeight() : this.measureAuthCardHeight(),\n        hidden: GraphicsHandler.instance.isMobileScreen() || !this.state.signupForFormItems,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 572\n        },\n        __self: this\n      }, React.createElement(Box, {\n        marginTop: GraphicsHandler.instance.dpToPx(1.5),\n        width: '1px',\n        height: this.measureAuthCardHeight(),\n        style: {\n          backgroundColor: '#fff',\n          float: 'left'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 576\n        },\n        __self: this\n      })), React.createElement(Box, {\n        width: '50%',\n        hidden: this.state.signupForFormItems || GraphicsHandler.instance.isMobileScreen(),\n        style: {\n          float: 'right',\n          background: GraphicsHandler.instance.secondaryGradient(),\n          height: '100%'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 583\n        },\n        __self: this\n      }, React.createElement(Center, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 591\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        style: {\n          marginTop: '56px',\n          color: '#ffffff'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 591\n        },\n        __self: this\n      }, \"Welcome to project\")), React.createElement(Center, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 595\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        style: {\n          color: '#fff'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 595\n        },\n        __self: this\n      }, \"Hormoz\")), React.createElement(Center, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 597\n        },\n        __self: this\n      }, React.createElement(\"h6\", {\n        style: {\n          marginTop: '24px',\n          marginLeft: '24px',\n          marginRight: '24px',\n          color: '#ffffff'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 597\n        },\n        __self: this\n      }, \"This is a project for building IOT networks in your home. This is a project for building IOT networks in your home. This is a project for building IOT networks in your home. This is a project for building IOT networks in your home.\"))), React.createElement(Container, {\n        style: {\n          width: this.state.resizeTrigger ? GraphicsHandler.instance.isMobileScreen() ? '100%' : '50%' : GraphicsHandler.instance.isMobileScreen() ? '100%' : '50%',\n          float: 'right'\n        },\n        hidden: !this.state.signupForFormItems || GraphicsHandler.instance.isMobileScreen(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 615\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 623\n        },\n        __self: this\n      }, React.createElement(Center, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 624\n        },\n        __self: this\n      }, React.createElement(TextBox, {\n        label: \"Email\",\n        InputLabelProps: {\n          style: {\n            color: '#fff'\n          }\n        },\n        style: {\n          marginTop: '56px'\n        },\n        InputProps: {\n          startAdornment: React.createElement(\"div\", {\n            style: {\n              width: '48px'\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 635\n            },\n            __self: this\n          }, React.createElement(EmailIcon, {\n            component: function component(svgProps) {\n              return React.createElement(\"svg\", Object.assign({}, svgProps, {\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 639\n                },\n                __self: this\n              }), React.createElement(\"defs\", {\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 640\n                },\n                __self: this\n              }, React.createElement(\"linearGradient\", {\n                id: \"gradient3\",\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 641\n                },\n                __self: this\n              }, React.createElement(\"stop\", {\n                offset: \"30%\",\n                stopColor: purple[400],\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 643\n                },\n                __self: this\n              }), React.createElement(\"stop\", {\n                offset: \"70%\",\n                stopColor: grey[400],\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 645\n                },\n                __self: this\n              }))), React.cloneElement(svgProps.children[0], {\n                fill: 'url(#gradient3)'\n              }));\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 636\n            },\n            __self: this\n          }))\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 625\n        },\n        __self: this\n      })), React.createElement(Center, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 660\n        },\n        __self: this\n      }, React.createElement(TextBox, {\n        label: \"FirstName\",\n        InputLabelProps: {\n          style: {\n            color: '#fff'\n          }\n        },\n        style: {\n          marginTop: '24px'\n        },\n        InputProps: {\n          startAdornment: React.createElement(\"div\", {\n            style: {\n              width: '48px'\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 671\n            },\n            __self: this\n          }, React.createElement(TextFormatIcon, {\n            component: function component(svgProps) {\n              return React.createElement(\"svg\", Object.assign({}, svgProps, {\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 675\n                },\n                __self: this\n              }), React.createElement(\"defs\", {\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 676\n                },\n                __self: this\n              }, React.createElement(\"linearGradient\", {\n                id: \"gradient4\",\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 677\n                },\n                __self: this\n              }, React.createElement(\"stop\", {\n                offset: \"30%\",\n                stopColor: purple[400],\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 679\n                },\n                __self: this\n              }), React.createElement(\"stop\", {\n                offset: \"70%\",\n                stopColor: grey[400],\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 681\n                },\n                __self: this\n              }))), React.cloneElement(svgProps.children[0], {\n                fill: 'url(#gradient4)'\n              }));\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 672\n            },\n            __self: this\n          }))\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 661\n        },\n        __self: this\n      })), React.createElement(Center, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 696\n        },\n        __self: this\n      }, React.createElement(TextBox, {\n        label: \"LastName\",\n        InputLabelProps: {\n          style: {\n            color: '#fff'\n          }\n        },\n        style: {\n          marginTop: '24px'\n        },\n        InputProps: {\n          startAdornment: React.createElement(\"div\", {\n            style: {\n              width: '48px'\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 707\n            },\n            __self: this\n          }, React.createElement(TextFormatIcon, {\n            component: function component(svgProps) {\n              return React.createElement(\"svg\", Object.assign({}, svgProps, {\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 711\n                },\n                __self: this\n              }), React.createElement(\"defs\", {\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 712\n                },\n                __self: this\n              }, React.createElement(\"linearGradient\", {\n                id: \"gradient5\",\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 713\n                },\n                __self: this\n              }, React.createElement(\"stop\", {\n                offset: \"30%\",\n                stopColor: purple[400],\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 715\n                },\n                __self: this\n              }), React.createElement(\"stop\", {\n                offset: \"70%\",\n                stopColor: grey[400],\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 717\n                },\n                __self: this\n              }))), React.cloneElement(svgProps.children[0], {\n                fill: 'url(#gradient5)'\n              }));\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 708\n            },\n            __self: this\n          }))\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 697\n        },\n        __self: this\n      })), React.createElement(Center, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 732\n        },\n        __self: this\n      }, React.createElement(TextBox, {\n        label: \"Phone\",\n        InputLabelProps: {\n          style: {\n            color: '#fff'\n          }\n        },\n        style: {\n          marginTop: '24px',\n          marginBottom: '48px'\n        },\n        InputProps: {\n          startAdornment: React.createElement(\"div\", {\n            style: {\n              width: '48px'\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 743\n            },\n            __self: this\n          }, React.createElement(PhoneIcon, {\n            component: function component(svgProps) {\n              return React.createElement(\"svg\", Object.assign({}, svgProps, {\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 747\n                },\n                __self: this\n              }), React.createElement(\"defs\", {\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 748\n                },\n                __self: this\n              }, React.createElement(\"linearGradient\", {\n                id: \"gradient6\",\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 749\n                },\n                __self: this\n              }, React.createElement(\"stop\", {\n                offset: \"30%\",\n                stopColor: purple[400],\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 751\n                },\n                __self: this\n              }), React.createElement(\"stop\", {\n                offset: \"70%\",\n                stopColor: grey[400],\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 753\n                },\n                __self: this\n              }))), React.cloneElement(svgProps.children[0], {\n                fill: 'url(#gradient6)'\n              }));\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 744\n            },\n            __self: this\n          }))\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 733\n        },\n        __self: this\n      })))))), React.createElement(Box, {\n        width: GraphicsHandler.instance.isMobileScreen() ? '100%' : '50%',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 772\n        },\n        __self: this\n      }, React.createElement(Center, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 773\n        },\n        __self: this\n      }, React.createElement(LoginButton, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: function onClick() {\n          _this2.setState({\n            loading: 4\n          });\n\n          setTimeout(function () {\n            _this2.setState({\n              loading: 5,\n              goHome: true\n            });\n          }, 1000);\n        },\n        style: {\n          outline: 'none',\n          position: 'relative',\n          top: '-24px',\n          width: '100px',\n          height: '48px',\n          zIndex: '3'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 774\n        },\n        __self: this\n      }, this.state.signupForFormItems ? 'Sign Up' : 'Sign In')))))))));\n    }\n  }]);\n\n  return AuthPage;\n}(Component);\n\nAuthPage.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nexport default withStyles(inClasses)(AuthPage);","map":{"version":3,"sources":["/home/keyhan/projects/js/InstaAiBot/ClientApp/src/layouts/AuthPage.js"],"names":["React","Component","LoginButton","Container","Box","Card","TextField","makeStyles","IconButton","PersonIcon","clsx","Grade","Visibility","VisibilityOff","blue","lightBlue","green","red","yellow","purple","grey","VpnKeyIcon","Checkbox","FormControlLabel","Link","AnimatedRotation","AnimatedPosition","PhoneIcon","TextFormatIcon","EmailIcon","Animate","GraphicsHandler","Redirect","Center","PropTypes","withStyles","TextBox","posed","LoginBox","div","visible","opacity","hidden","classes","useStyles","theme","root","display","flexWrap","margin","spacing","textField","flexBasis","inClasses","rootInput","background","StylePreparer","props","AuthPage","mobileWidth","state","loading","signupForCardAngles","signupForFormItems","forecasts","resizeTrigger","showPassword","goHome","document","body","style","overflowX","overflowY","instance","scrollTopTargetRef","createRef","loadingViewRef","updateWindowDimensions","bind","handleScrollReset","forceScrollReset","window","addEventListener","removeEventListener","width","innerWidth","density","height","innerHeight","setState","isLongMobileScreen","isMobileScreen","dpToPx","isWideMobileScreen","scrollTo","undefined","setTimeout","forceUpdate","position","backgroundColor","marginTop","current","clientHeight","color","textAlign","Math","max","cmHeight","measureAuthCardHeight","measureAuthCardWidth","borderRadius","zIndex","backdropFilter","mainGradient","float","borderBottomColor","startAdornment","svgProps","cloneElement","children","fill","endAdornment","outline","currState","scrollIntoView","behavior","secondaryGradient","marginLeft","marginRight","marginBottom","top","propTypes","object","isRequired"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,WAAP,MAAwB,oBAAxB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,SAAQC,GAAR,QAAkB,mBAAlB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,SAAQC,UAAR,QAAyB,0BAAzB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,UAAP,MAAuB,2BAAvB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,SAAQC,KAAR,EAAeC,UAAf,EAA2BC,aAA3B,QAA+C,oBAA/C;AACA,SAAQC,IAAR,EAAcC,SAAd,EAAyBC,KAAzB,EAAgCC,GAAhC,EAAqCC,MAArC,EAA6CC,MAA7C,EAAqDC,IAArD,QAAgE,0BAAhE;AACA,OAAOC,UAAP,MAAuB,2BAAvB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,gBAAP,MAA6B,oCAA7B;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,SAAQC,gBAAR,EAA0BC,gBAA1B,QAAiD,uBAAjD;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,OAAOC,cAAP,MAA2B,+BAA3B;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,OAAOC,OAAP,MAAoB,cAApB;AACA,OAAOC,eAAP,MAA4B,4BAA5B;AACA,OAAOC,QAAP,MAAqB,2BAArB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,UAAP,MAAuB,qCAAvB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,KAAP,MAAkB,YAAlB;AAEA,IAAMC,QAAQ,GAAGD,KAAK,CAACE,GAAN,CAAU;AACvBC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,OAAO,EAAE;AAAX,GADc;AAEvBC,EAAAA,MAAM,EAAE;AAAED,IAAAA,OAAO,EAAE;AAAX;AAFe,CAAV,CAAjB;AAKA,IAAIE,OAAO,GAAG,EAAd;AAEA,IAAIC,SAAS,GAAGrC,UAAU,CAAC,UAAAsC,KAAK;AAAA,SAAK;AACjCC,IAAAA,IAAI,EAAE;AACFC,MAAAA,OAAO,EAAE,MADP;AAEFC,MAAAA,QAAQ,EAAE;AAFR,KAD2B;AAKjCC,IAAAA,MAAM,EAAE;AACJA,MAAAA,MAAM,EAAEJ,KAAK,CAACK,OAAN,CAAc,CAAd;AADJ,KALyB;AAQjCC,IAAAA,SAAS,EAAE;AACPC,MAAAA,SAAS,EAAE;AADJ;AARsB,GAAL;AAAA,CAAN,CAA1B;AAaA,IAAMC,SAAS,GAAG;AACdC,EAAAA,SAAS,EAAE;AACPC,IAAAA,UAAU,EAAE;AADL;AADG,CAAlB;;AAMA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAE1Bd,EAAAA,OAAO,GAAGC,SAAS,EAAnB;AAEA,SAAQ,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAR;AACH;;IAEKc,Q;;;;;AAIF,oBAAYD,KAAZ,EAAmB;AAAA;;AAAA;;AACf,kFAAMA,KAAN;AADe,UAFnBE,WAEmB,GAFL,GAEK;AAEf,UAAKC,KAAL,GAAa;AACTC,MAAAA,OAAO,EAAE,CADA;AAETC,MAAAA,mBAAmB,EAAE,KAFZ;AAGTC,MAAAA,kBAAkB,EAAE,KAHX;AAITC,MAAAA,SAAS,EAAE,EAJF;AAKTC,MAAAA,aAAa,EAAE,KALN;AAMTC,MAAAA,YAAY,EAAE,KANL;AAOTC,MAAAA,MAAM,EAAE;AAPC,KAAb;AASAC,IAAAA,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoBC,SAApB,GAAgC,QAAhC;AACAH,IAAAA,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoBE,SAApB,GAAgC,QAAhC;AACAzC,IAAAA,eAAe,CAAC0C,QAAhB,GAA2B,IAAI1C,eAAJ,EAA3B;AACA,UAAK2C,kBAAL,GAA0B1E,KAAK,CAAC2E,SAAN,EAA1B;AACA,UAAKC,cAAL,GAAsB5E,KAAK,CAAC2E,SAAN,EAAtB;AACA,UAAKE,sBAAL,GAA8B,MAAKA,sBAAL,CAA4BC,IAA5B,uDAA9B;AACA,UAAKC,iBAAL,GAAyB,MAAKA,iBAAL,CAAuBD,IAAvB,uDAAzB;AACA,UAAKE,gBAAL,GAAwB,MAAKA,gBAAL,CAAsBF,IAAtB,uDAAxB,CAlBe,CAmBf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAhCe;AAiClB;;;;wCAEmB;AAChB,WAAKD,sBAAL;AACAI,MAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkC,KAAKL,sBAAvC;AACH;;;2CAEsB;AACnBI,MAAAA,MAAM,CAACE,mBAAP,CAA2B,QAA3B,EAAqC,KAAKN,sBAA1C;AACH;;;6CAEwB;AACrB9C,MAAAA,eAAe,CAAC0C,QAAhB,CAAyBW,KAAzB,GAAiCH,MAAM,CAACI,UAAP,GAAoBtD,eAAe,CAAC0C,QAAhB,CAAyBa,OAA9E;AACAvD,MAAAA,eAAe,CAAC0C,QAAhB,CAAyBc,MAAzB,GAAkCN,MAAM,CAACO,WAAP,GAAqBzD,eAAe,CAAC0C,QAAhB,CAAyBa,OAAhF;AACA,WAAKG,QAAL,CAAc;AAACxB,QAAAA,aAAa,EAAE,CAAC,KAAKL,KAAL,CAAWK;AAA5B,OAAd;AACH;;;4CAEuB;AACpB,UAAI,KAAKL,KAAL,CAAWC,OAAX,IAAsB,CAA1B,EAA6B;AACzB,YAAI9B,eAAe,CAAC0C,QAAhB,CAAyBiB,kBAAzB,EAAJ,EAAmD;AAC/CtB,UAAAA,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoBE,SAApB,GAAgC,QAAhC;AACA,eAAKQ,gBAAL;AACH,SAHD,MAIIZ,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoBE,SAApB,GAAgC,MAAhC;AACP;;AACD,aAAOzC,eAAe,CAAC0C,QAAhB,CAAyBkB,cAAzB,KACH,KAAK/B,KAAL,CAAWG,kBAAX,GACI,MADJ,GAEI,MAHD,GAIH,KAAKH,KAAL,CAAWG,kBAAX,GACIhC,eAAe,CAAC0C,QAAhB,CAAyBmB,MAAzB,CAAgC,GAAhC,CADJ,GAEI7D,eAAe,CAAC0C,QAAhB,CAAyBmB,MAAzB,CAAgC,GAAhC,CANR;AAOH;;;2CAEsB;AACnB,aAAO7D,eAAe,CAAC0C,QAAhB,CAAyBkB,cAAzB,KACH5D,eAAe,CAAC0C,QAAhB,CAAyBoB,kBAAzB,KACI9D,eAAe,CAAC0C,QAAhB,CAAyBmB,MAAzB,CAAgC7D,eAAe,CAAC0C,QAAhB,CAAyBW,KAAzD,IAAkE,CADtE,GAEIrD,eAAe,CAAC0C,QAAhB,CAAyBmB,MAAzB,CAAgC7D,eAAe,CAAC0C,QAAhB,CAAyBW,KAAzD,IAAkE,CAAlE,GAAsE,CAHvE,GAIHrD,eAAe,CAAC0C,QAAhB,CAAyBmB,MAAzB,CAAgC,GAAhC,CAJJ;AAKH;;;wCAEmB;AAChB,UAAI,KAAKhC,KAAL,CAAWC,OAAX,KAAuB,CAA3B,EAA8B;AAC1BoB,QAAAA,MAAM,CAACa,QAAP,CAAgB,CAAhB,EAAmB,CAAnB;AACH;AACJ;;;uCAEkB;AACfb,MAAAA,MAAM,CAACa,QAAP,CAAgB,CAAhB,EAAmB,CAAnB;AACH;;;6BAEQ;AAAA;;AAEL,UAAI,KAAKlC,KAAL,CAAWO,MAAf,EAAuB;AACnB,eAAO,oBAAC,QAAD;AAAU,UAAA,EAAE,EAAC,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACH;;AAED,UAAIxB,OAAO,KAAKoD,SAAhB,EAA2B;AACvBC,QAAAA,UAAU,CAAC,YAAM;AACb,UAAA,MAAI,CAACC,WAAL;AACH,SAFS,EAEP,GAFO,CAAV;AAGA,eAAQ,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAR;AACH;;AAED,aACI;AAAK,QAAA,KAAK,EAAE;AACRb,UAAAA,KAAK,EAAE,MADC;AAERG,UAAAA,MAAM,EAAE;AAFA,SAAZ;AAIK,QAAA,WAAW,EAAE,KAAKR,iBAAL,EAJlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKI;AAAK,QAAA,GAAG,EAAE,KAAKL,kBAAf;AAAmC,QAAA,KAAK,EAAE;AAACU,UAAAA,KAAK,EAAE,KAAR;AAAeG,UAAAA,MAAM,EAAE;AAAvB,SAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALJ,EAMI;AAAK,QAAA,KAAK,EAAE;AACRW,UAAAA,QAAQ,EAAE;AADF,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAGI,oBAAC,OAAD;AAAS,QAAA,QAAQ,EAAE,KAAKtC,KAAL,CAAWC,OAAX,KAAuB,CAA1C;AACS,QAAA,QAAQ,EAAE,IADnB;AAES,QAAA,EAAE,EAAC,GAFZ;AAGS,QAAA,IAAI,EAAC,GAHd;AAIS,QAAA,aAAa,EAAC,SAJvB;AAKS,QAAA,KAAK,EAAE;AACHqC,UAAAA,QAAQ,EAAE,UADP;AAEHjD,UAAAA,MAAM,EAAE;AAFL,SALhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SASI,oBAAC,GAAD;AACI,QAAA,KAAK,EAAE;AACHR,UAAAA,OAAO,EAAE,CADN;AAEH2C,UAAAA,KAAK,EAAE,MAFJ;AAGHG,UAAAA,MAAM,EAAE,MAHL;AAIHY,UAAAA,eAAe,EAAE,MAJd;AAKHD,UAAAA,QAAQ,EAAE,UALP;AAMHjD,UAAAA,MAAM,EAAE;AANL,SADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QATJ,CAHJ,EAsBI,oBAAC,OAAD;AAAS,QAAA,QAAQ,EAAE,KAAKW,KAAL,CAAWC,OAAX,GAAqB,CAAxC;AAA2C,QAAA,QAAQ,EAAE,IAArD;AAA2D,QAAA,EAAE,EAAE,KAAKD,KAAL,CAAWC,OAAX,KAAuB,CAAvB,GAA2B,CAA3B,GAA+B,CAA9F;AACS,QAAA,IAAI,EAAE,KAAKD,KAAL,CAAWC,OAAX,KAAuB,CAAvB,GAA2B,CAA3B,GAA+B,CAD9C;AAES,QAAA,aAAa,EAAC,SAFvB;AAGS,QAAA,KAAK,EAAE;AACHqC,UAAAA,QAAQ,EAAE,UADP;AAEHjD,UAAAA,MAAM,EAAE;AAFL,SAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAOI,oBAAC,GAAD;AACI,QAAA,KAAK,EAAE;AACHmC,UAAAA,KAAK,EAAE,MADJ;AAEHG,UAAAA,MAAM,EAAE,OAFL;AAGHW,UAAAA,QAAQ,EAAE,UAHP;AAIHjD,UAAAA,MAAM,EAAE,CAJL;AAKHR,UAAAA,OAAO,EAAE,CALN;AAMH2D,UAAAA,SAAS,EAAG,YAAM;AACd,gBAAI,MAAI,CAACxB,cAAL,CAAoByB,OAApB,KAAgC,IAApC,EACI,OAAO,CAAP,CADJ,KAEK;AACD,qBAAO,CAACtE,eAAe,CAAC0C,QAAhB,CAAyBmB,MAAzB,CAAgC7D,eAAe,CAAC0C,QAAhB,CAAyBc,MAAzD,IACF,MAAI,CAACX,cAAL,CAAoByB,OAApB,CAA4BC,YAD3B,IAC2C,CADlD;AAEH;AACJ,WAPU;AANR,SADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAgBI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,GAAD;AAAK,QAAA,GAAG,EAAE,KAAK1B,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAII;AACI,QAAA,KAAK,EAAE;AACH2B,UAAAA,KAAK,EAAE,MADJ;AAEHnB,UAAAA,KAAK,EAAE,MAFJ;AAGHG,UAAAA,MAAM,EAAE,MAHL;AAIHa,UAAAA,SAAS,EAAE,EAJR;AAKHI,UAAAA,SAAS,EAAE;AALR,SADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCAJJ,CADJ,CAhBJ,CAPJ,CAtBJ,CANJ,EAqEI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,QAAD;AACI,QAAA,QAAQ,EAAE,IADd;AAEI,QAAA,GAAG,EAAE,KAAK5C,KAAL,CAAWC,OAAX,GAAqB,CAArB,IAA0B,KAAKD,KAAL,CAAWC,OAAX,GAAqB,CAA/C,GACD9B,eAAe,CAAC0C,QAAhB,CAAyBc,MAAzB,GAAkC,GADjC,GAEDxD,eAAe,CAAC0C,QAAhB,CAAyBkB,cAAzB,KACIc,IAAI,CAACC,GAAL,CAAS,CAAT,EAAY3E,eAAe,CAAC0C,QAAhB,CAAyBiB,kBAAzB,KACR3D,eAAe,CAAC0C,QAAhB,CAAyBkC,QAAzB,GAAoC,EAApC,GAAyC,GADjC,GAER5E,eAAe,CAAC0C,QAAhB,CAAyBkC,QAAzB,GAAoC,EAApC,GAAyC,GAF7C,IAEoD,IAHxD,GAIIF,IAAI,CAACC,GAAL,CAAS,EAAT,EAAa,CAAC3E,eAAe,CAAC0C,QAAhB,CAAyBmB,MAAzB,CAAgC7D,eAAe,CAAC0C,QAAhB,CAAyBc,MAAzD,IACRxD,eAAe,CAAC0C,QAAhB,CAAyBmB,MAAzB,CAAgC,KAAKgB,qBAAL,EAAhC,CADO,IAC0D,CADvE,CARZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAUI,oBAAC,gBAAD;AACI,QAAA,QAAQ,EAAE,IADd;AAEI,QAAA,MAAM,EAAE,KAAKhD,KAAL,CAAWE,mBAAX,GAAiC,IAAjC,GAAwC,CAFpD;AAGI,QAAA,MAAM,EAAE,KAAKF,KAAL,CAAWE,mBAAX,GAAiC,IAAjC,GAAwC,CAHpD;AAII,QAAA,MAAM,EAAE,KAAKF,KAAL,CAAWE,mBAAX,GAAiC,IAAjC,GAAwC,CAJpD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKI,oBAAC,OAAD;AAAS,QAAA,QAAQ,EAAE,KAAKF,KAAL,CAAWC,OAAX,IAAsB,CAAzC;AACS,QAAA,QAAQ,EAAE,IADnB;AAES,QAAA,EAAE,EAAE,KAAKD,KAAL,CAAWC,OAAX,KAAuB,CAAvB,GAA2B,CAA3B,GAA+B,CAF5C;AAGS,QAAA,IAAI,EAAE,KAAKD,KAAL,CAAWC,OAAX,KAAuB,CAAvB,GAA2B,CAA3B,GAA+B,CAH9C;AAIS,QAAA,aAAa,EAAC,SAJvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKI,oBAAC,GAAD;AACI,QAAA,KAAK,EAAE,KAAKgD,oBAAL,EADX;AAEI,QAAA,KAAK,EAAE;AACHpE,UAAAA,OAAO,EAAE;AADN,SAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKI,oBAAC,IAAD;AACI,QAAA,KAAK,EAAE,KAAKoE,oBAAL,EADX;AAEI,QAAA,KAAK,EAAE;AACHC,UAAAA,YAAY,EAAE,qBADX;AAEHC,UAAAA,MAAM,EAAE,GAFL;AAGHC,UAAAA,cAAc,EAAE,YAHb;AAIHzD,UAAAA,UAAU,EAAExB,eAAe,CAAC0C,QAAhB,CAAyBwC,YAAzB,CAAsC,IAAtC;AAJT,SAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAQI,oBAAC,GAAD;AACI,QAAA,KAAK,EAAE,MADX;AAEI,QAAA,MAAM,EAAE,KAAKL,qBAAL,EAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAGI,oBAAC,GAAD;AACI,QAAA,KAAK,EACD7E,eAAe,CAAC0C,QAAhB,CAAyBkB,cAAzB,KACI,MADJ,GAEI,KAJZ;AAMI,QAAA,MAAM,EAAE,KAAKiB,qBAAL,EANZ;AAOI,QAAA,KAAK,EAAE;AAACM,UAAAA,KAAK,EAAE;AAAR,SAPX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAQI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,OAAD;AACI,QAAA,KAAK,EAAC,UADV;AAEI,QAAA,eAAe,EAAE;AACb5C,UAAAA,KAAK,EAAG;AACJiC,YAAAA,KAAK,EAAE;AADH;AADK,SAFrB;AAOI,QAAA,KAAK,EAAE;AACHnB,UAAAA,KAAK,EAAE,KADJ;AAEHgB,UAAAA,SAAS,EAAE,MAFR;AAGH,mCAAyB;AACrBe,YAAAA,iBAAiB,EAAE,OADE;AAErBZ,YAAAA,KAAK,EAAE;AAFc;AAHtB,SAPX;AAeI,QAAA,UAAU,EAAE;AACRa,UAAAA,cAAc,EACV;AAAK,YAAA,KAAK,EAAE;AAAChC,cAAAA,KAAK,EAAE;AAAR,aAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACI,oBAAC,UAAD;AACI,YAAA,SAAS,EAAE,mBAAAiC,QAAQ,EAAI;AACnB,qBACI,6CAASA,QAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACI;AACI,gBAAA,EAAE,EAAC,WADP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAEI;AAAM,gBAAA,MAAM,EAAC,KAAb;AACM,gBAAA,SAAS,EAAEvG,IAAI,CAAC,GAAD,CADrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,EAII;AAAM,gBAAA,MAAM,EAAC,KAAb;AACM,gBAAA,SAAS,EAAEG,GAAG,CAAC,GAAD,CADpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJJ,CADJ,CADJ,EAUKjB,KAAK,CAACsH,YAAN,CAAmBD,QAAQ,CAACE,QAAT,CAAkB,CAAlB,CAAnB,EAAyC;AACtCC,gBAAAA,IAAI,EAAE;AADgC,eAAzC,CAVL,CADJ;AAgBH,aAlBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAFI,SAfhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ,EA4CI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,OAAD;AACI,QAAA,EAAE,EAAC,6BADP;AAEI,QAAA,SAAS,EAAE9G,IAAI,CAACiC,OAAO,CAACM,MAAT,EAAiBN,OAAO,CAACQ,SAAzB,CAFnB;AAGI,QAAA,IAAI,EAAE,KAAKS,KAAL,CAAWM,YAAX,GAA0B,MAA1B,GAAmC,UAH7C;AAII,QAAA,KAAK,EAAC,UAJV;AAKI,QAAA,eAAe,EAAE;AACbI,UAAAA,KAAK,EAAG;AACJiC,YAAAA,KAAK,EAAE;AADH;AADK,SALrB;AAUI,QAAA,KAAK,EAAE;AAACnB,UAAAA,KAAK,EAAE,KAAR;AAAegB,UAAAA,SAAS,EAAE;AAA1B,SAVX;AAWI,QAAA,UAAU,EAAE;AACRgB,UAAAA,cAAc,EACV;AAAK,YAAA,KAAK,EAAE;AAAChC,cAAAA,KAAK,EAAE;AAAR,aAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACI,oBAAC,UAAD;AACI,YAAA,SAAS,EAAE,mBAAAiC,QAAQ,EAAI;AACnB,qBACI,6CAASA,QAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACI;AACI,gBAAA,EAAE,EAAC,WADP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAEI;AAAM,gBAAA,MAAM,EAAC,KAAb;AACM,gBAAA,SAAS,EAAErG,KAAK,CAAC,GAAD,CADtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,EAII;AAAM,gBAAA,MAAM,EAAC,KAAb;AACM,gBAAA,SAAS,EAAEE,MAAM,CAAC,GAAD,CADvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJJ,CADJ,CADJ,EAUKlB,KAAK,CAACsH,YAAN,CAAmBD,QAAQ,CAACE,QAAT,CAAkB,CAAlB,CAAnB,EAAyC;AACtCC,gBAAAA,IAAI,EAAE;AADgC,eAAzC,CAVL,CADJ;AAgBH,aAlBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,CAFI;AAwBRC,UAAAA,YAAY,EACR;AAAK,YAAA,KAAK,EAAE;AAACrC,cAAAA,KAAK,EAAE;AAAR,aAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACI,oBAAC,UAAD;AACI,YAAA,IAAI,EAAE,EADV;AAEI,YAAA,KAAK,EAAE;AAACsC,cAAAA,OAAO,EAAE;AAAV,aAFX;AAGI,YAAA,OAAO,EAAE,mBAAM;AACX,cAAA,MAAI,CAACjC,QAAL,CAAc;AAACvB,gBAAAA,YAAY,EAAE,CAAC,MAAI,CAACN,KAAL,CAAWM;AAA3B,eAAd;AACH,aALL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAMK,KAAKN,KAAL,CAAWM,YAAX,GACG,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADH,GAEG,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YARR,CADJ;AAzBI,SAXhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CA5CJ,EAiGI,oBAAC,SAAD;AACI,QAAA,MAAM,EAAE,CAAC,KAAKN,KAAL,CAAWG,kBAAZ,IAAkChC,eAAe,CAAC0C,QAAhB,CAAyBW,KAAzB,GAAiC,KAAKzB,WADpF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,SAAD;AACI,QAAA,SAAS,EAAEjD,IAAI,CAACiC,OAAO,CAACM,MAAT,EAAiBN,OAAO,CAACQ,SAAzB,CADnB;AAEI,QAAA,KAAK,EAAC,OAFV;AAGI,QAAA,KAAK,EAAE;AAACiD,UAAAA,SAAS,EAAE;AAAZ,SAHX;AAII,QAAA,UAAU,EAAE;AACRgB,UAAAA,cAAc,EACV;AAAK,YAAA,KAAK,EAAE;AAAChC,cAAAA,KAAK,EAAE;AAAR,aAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACI,oBAAC,SAAD;AACI,YAAA,SAAS,EAAE,mBAAAiC,QAAQ,EAAI;AACnB,qBACI,6CAASA,QAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACI;AACI,gBAAA,EAAE,EAAC,WADP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAEI;AACI,gBAAA,MAAM,EAAC,KADX;AAEI,gBAAA,SAAS,EAAElG,MAAM,CAAC,GAAD,CAFrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,EAKI;AACI,gBAAA,MAAM,EAAC,KADX;AAEI,gBAAA,SAAS,EAAEC,IAAI,CAAC,GAAD,CAFnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALJ,CADJ,CADJ,EAYKpB,KAAK,CAACsH,YAAN,CAAmBD,QAAQ,CAACE,QAAT,CAAkB,CAAlB,CAAnB,EAAyC;AACtCC,gBAAAA,IAAI,EAAE;AADgC,eAAzC,CAZL,CADJ;AAkBH,aApBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAFI,SAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CAFJ,EAoCI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,SAAD;AACI,QAAA,EAAE,EAAC,6BADP;AAEI,QAAA,SAAS,EAAE9G,IAAI,CAACiC,OAAO,CAACM,MAAT,EAAiBN,OAAO,CAACQ,SAAzB,CAFnB;AAGI,QAAA,KAAK,EAAC,WAHV;AAII,QAAA,KAAK,EAAE;AAACiD,UAAAA,SAAS,EAAE;AAAZ,SAJX;AAKI,QAAA,UAAU,EAAE;AACRgB,UAAAA,cAAc,EACV;AAAK,YAAA,KAAK,EAAE;AAAChC,cAAAA,KAAK,EAAE;AAAR,aAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACI,oBAAC,cAAD;AACI,YAAA,SAAS,EAAE,mBAAAiC,QAAQ,EAAI;AACnB,qBACI,6CAASA,QAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACI;AACI,gBAAA,EAAE,EAAC,WADP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAEI;AACI,gBAAA,MAAM,EAAC,KADX;AAEI,gBAAA,SAAS,EAAElG,MAAM,CAAC,GAAD,CAFrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,EAKI;AACI,gBAAA,MAAM,EAAC,KADX;AAEI,gBAAA,SAAS,EAAEC,IAAI,CAAC,GAAD,CAFnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALJ,CADJ,CADJ,EAYKpB,KAAK,CAACsH,YAAN,CAAmBD,QAAQ,CAACE,QAAT,CAAkB,CAAlB,CAAnB,EAAyC;AACtCC,gBAAAA,IAAI,EAAE;AADgC,eAAzC,CAZL,CADJ;AAkBH,aApBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAFI,SALhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CApCJ,EAuEI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,SAAD;AACI,QAAA,EAAE,EAAC,6BADP;AAEI,QAAA,SAAS,EAAE9G,IAAI,CAACiC,OAAO,CAACM,MAAT,EAAiBN,OAAO,CAACQ,SAAzB,CAFnB;AAGI,QAAA,KAAK,EAAC,UAHV;AAII,QAAA,KAAK,EAAE;AAACiD,UAAAA,SAAS,EAAE;AAAZ,SAJX;AAKI,QAAA,UAAU,EAAE;AACRgB,UAAAA,cAAc,EACV;AAAK,YAAA,KAAK,EAAE;AAAChC,cAAAA,KAAK,EAAE;AAAR,aAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACI,oBAAC,cAAD;AACI,YAAA,SAAS,EAAE,mBAAAiC,QAAQ,EAAI;AACnB,qBACI,6CAASA,QAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACI;AACI,gBAAA,EAAE,EAAC,WADP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAEI;AACI,gBAAA,MAAM,EAAC,KADX;AAEI,gBAAA,SAAS,EAAElG,MAAM,CAAC,GAAD,CAFrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,EAKI;AACI,gBAAA,MAAM,EAAC,KADX;AAEI,gBAAA,SAAS,EAAEC,IAAI,CAAC,GAAD,CAFnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALJ,CADJ,CADJ,EAYKpB,KAAK,CAACsH,YAAN,CAAmBD,QAAQ,CAACE,QAAT,CAAkB,CAAlB,CAAnB,EAAyC;AACtCC,gBAAAA,IAAI,EAAE;AADgC,eAAzC,CAZL,CADJ;AAkBH,aApBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAFI,SALhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CAvEJ,EA0GI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,SAAD;AACI,QAAA,EAAE,EAAC,6BADP;AAEI,QAAA,SAAS,EAAE9G,IAAI,CAACiC,OAAO,CAACM,MAAT,EAAiBN,OAAO,CAACQ,SAAzB,CAFnB;AAGI,QAAA,KAAK,EAAC,OAHV;AAII,QAAA,KAAK,EAAE;AAACiD,UAAAA,SAAS,EAAE;AAAZ,SAJX;AAKI,QAAA,UAAU,EAAE;AACRgB,UAAAA,cAAc,EACV;AAAK,YAAA,KAAK,EAAE;AAAChC,cAAAA,KAAK,EAAE;AAAR,aAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACI,oBAAC,SAAD;AACI,YAAA,SAAS,EAAE,mBAAAiC,QAAQ,EAAI;AACnB,qBACI,6CAASA,QAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACI;AACI,gBAAA,EAAE,EAAC,YADP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAEI;AACI,gBAAA,MAAM,EAAC,KADX;AAEI,gBAAA,SAAS,EAAElG,MAAM,CAAC,GAAD,CAFrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,EAKI;AACI,gBAAA,MAAM,EAAC,KADX;AAEI,gBAAA,SAAS,EAAEC,IAAI,CAAC,GAAD,CAFnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALJ,CADJ,CADJ,EAYKpB,KAAK,CAACsH,YAAN,CAAmBD,QAAQ,CAACE,QAAT,CAAkB,CAAlB,CAAnB,EAAyC;AACtCC,gBAAAA,IAAI,EAAE;AADgC,eAAzC,CAZL,CADJ;AAkBH,aApBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAFI,SALhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CA1GJ,CAjGJ,CARJ,EAwPI,oBAAC,SAAD;AAAW,QAAA,MAAM,EAAE,KAAK5D,KAAL,CAAWG,kBAA9B;AAAkD,QAAA,MAAM,EAAE,MAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,GAAD;AAAK,QAAA,MAAM,EAAE,MAAb;AACK,QAAA,KAAK,EAAE;AAACqB,UAAAA,KAAK,EAAE,KAAR;AAAegB,UAAAA,SAAS,EAAE;AAA1B,SADZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEI,oBAAC,gBAAD;AACI,QAAA,KAAK,EAAE;AACHG,UAAAA,KAAK,EAAE;AADJ,SADX;AAII,QAAA,OAAO,EACH,oBAAC,QAAD;AAAU,UAAA,KAAK,EAAE;AACbA,YAAAA,KAAK,EAAE;AADM,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UALR;AASI,QAAA,KAAK,EAAC,mBATV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,CADJ,CADJ,CAxPJ,EAyQI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,GAAD;AACI,QAAA,SAAS,EAAE,KADf;AAEI,QAAA,KAAK,EAAE;AAACnB,UAAAA,KAAK,EAAE;AAAR,SAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAGI,oBAAC,IAAD;AACI,QAAA,KAAK,EAAE;AACHmB,UAAAA,KAAK,EAAE;AADJ,SADX;AAII,QAAA,SAAS,EAAC,QAJd;AAKI,QAAA,OAAO,EAAC,OALZ;AAMI,QAAA,OAAO,EAAE,mBAAM;AACX,cAAIoB,SAAS,GAAG,MAAI,CAAC/D,KAAL,CAAWE,mBAA3B;AACA6D,UAAAA,SAAS,GAAG,CAACA,SAAb;;AACA,UAAA,MAAI,CAAClC,QAAL,CAAc;AAAC3B,YAAAA,mBAAmB,EAAE,CAAC,MAAI,CAACF,KAAL,CAAWE;AAAlC,WAAd;;AACA,cAAI/B,eAAe,CAAC0C,QAAhB,CAAyBkB,cAAzB,MAA6C,CAACgC,SAAlD,EAA6D;AACzD,YAAA,MAAI,CAACjD,kBAAL,CAAwB2B,OAAxB,CAAgCuB,cAAhC,CAA+C;AAACC,cAAAA,QAAQ,EAAE;AAAX,aAA/C;AACH;;AACD7B,UAAAA,UAAU,CAAC,YAAM;AACb,YAAA,MAAI,CAACP,QAAL,CAAc;AAAC1B,cAAAA,kBAAkB,EAAE,CAAC,MAAI,CAACH,KAAL,CAAWG;AAAjC,aAAd;;AACA,gBAAIhC,eAAe,CAAC0C,QAAhB,CAAyBkB,cAAzB,MAA6C,MAAI,CAAC/B,KAAL,CAAWG,kBAA5D,EAAgF;AAC5EK,cAAAA,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoBE,SAApB,GAAgC,MAAhC;AACH,aAFD,MAEO;AACH,kBAAIzC,eAAe,CAAC0C,QAAhB,CAAyBiB,kBAAzB,EAAJ,EAAmD;AAC/CtB,gBAAAA,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoBE,SAApB,GAAgC,QAAhC;;AACA,gBAAA,MAAI,CAACQ,gBAAL;AACH,eAHD,MAIIZ,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoBE,SAApB,GAAgC,MAAhC;AACP;AACJ,WAXS,EAWP,GAXO,CAAV;AAYH,SAzBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SA0BK,KAAKZ,KAAL,CAAWG,kBAAX,GAAgC,2BAAhC,GAA8D,4BA1BnE,CAHJ,CADJ,CAzQJ,CAHJ,EA+SI,oBAAC,SAAD;AACI,QAAA,KAAK,EAAE,KADX;AAEI,QAAA,MAAM,EAAE,KAAKA,kBAAL,GAA0B,KAAK6C,qBAAL,EAA1B,GAAyD,KAAKA,qBAAL,EAFrE;AAGI,QAAA,MAAM,EAAE7E,eAAe,CAAC0C,QAAhB,CAAyBkB,cAAzB,MAA6C,CAAC,KAAK/B,KAAL,CAAWG,kBAHrE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAII,oBAAC,GAAD;AACI,QAAA,SAAS,EAAEhC,eAAe,CAAC0C,QAAhB,CAAyBmB,MAAzB,CAAgC,GAAhC,CADf;AAEI,QAAA,KAAK,EAAE,KAFX;AAGI,QAAA,MAAM,EAAE,KAAKgB,qBAAL,EAHZ;AAII,QAAA,KAAK,EAAE;AAACT,UAAAA,eAAe,EAAE,MAAlB;AAA0Be,UAAAA,KAAK,EAAE;AAAjC,SAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJJ,CA/SJ,EA0TI,oBAAC,GAAD;AACI,QAAA,KAAK,EAAE,KADX;AAEI,QAAA,MAAM,EAAE,KAAKtD,KAAL,CAAWG,kBAAX,IAAkChC,eAAe,CAAC0C,QAAhB,CAAyBkB,cAAzB,EAF9C;AAGI,QAAA,KAAK,EAAE;AACHuB,UAAAA,KAAK,EAAE,OADJ;AAEH3D,UAAAA,UAAU,EAAExB,eAAe,CAAC0C,QAAhB,CAAyBqD,iBAAzB,EAFT;AAGHvC,UAAAA,MAAM,EAAE;AAHL,SAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAQI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAQ;AACJ,QAAA,KAAK,EAAE;AAACa,UAAAA,SAAS,EAAE,MAAZ;AAAoBG,UAAAA,KAAK,EAAE;AAA3B,SADH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAAR,CARJ,EAYI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAQ;AAAI,QAAA,KAAK,EAAE;AAACA,UAAAA,KAAK,EAAE;AAAR,SAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAR,CAZJ,EAcI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAQ;AAAI,QAAA,KAAK,EAAE;AACfH,UAAAA,SAAS,EAAE,MADI;AAEf2B,UAAAA,UAAU,EAAE,MAFG;AAGfC,UAAAA,WAAW,EAAE,MAHE;AAIfzB,UAAAA,KAAK,EAAE;AAJQ,SAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mPAAR,CAdJ,CA1TJ,EA0VI,oBAAC,SAAD;AACI,QAAA,KAAK,EAAE;AACHnB,UAAAA,KAAK,EAAE,KAAKxB,KAAL,CAAWK,aAAX,GACHlC,eAAe,CAAC0C,QAAhB,CAAyBkB,cAAzB,KAA4C,MAA5C,GAAqD,KADlD,GAEH5D,eAAe,CAAC0C,QAAhB,CAAyBkB,cAAzB,KAA4C,MAA5C,GAAqD,KAHtD;AAIHuB,UAAAA,KAAK,EAAE;AAJJ,SADX;AAOI,QAAA,MAAM,EAAE,CAAC,KAAKtD,KAAL,CAAWG,kBAAZ,IAAkChC,eAAe,CAAC0C,QAAhB,CAAyBkB,cAAzB,EAP9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAQI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,OAAD;AACI,QAAA,KAAK,EAAC,OADV;AAEI,QAAA,eAAe,EAAE;AACbrB,UAAAA,KAAK,EAAG;AACJiC,YAAAA,KAAK,EAAE;AADH;AADK,SAFrB;AAOI,QAAA,KAAK,EAAE;AAACH,UAAAA,SAAS,EAAE;AAAZ,SAPX;AAQI,QAAA,UAAU,EAAE;AACRgB,UAAAA,cAAc,EACV;AAAK,YAAA,KAAK,EAAE;AAAChC,cAAAA,KAAK,EAAE;AAAR,aAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACI,oBAAC,SAAD;AACI,YAAA,SAAS,EAAE,mBAAAiC,QAAQ,EAAI;AACnB,qBACI,6CAASA,QAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACI;AACI,gBAAA,EAAE,EAAC,WADP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAEI;AAAM,gBAAA,MAAM,EAAC,KAAb;AACM,gBAAA,SAAS,EAAElG,MAAM,CAAC,GAAD,CADvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,EAII;AAAM,gBAAA,MAAM,EAAC,KAAb;AACM,gBAAA,SAAS,EAAEC,IAAI,CAAC,GAAD,CADrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJJ,CADJ,CADJ,EAUKpB,KAAK,CAACsH,YAAN,CAAmBD,QAAQ,CAACE,QAAT,CAAkB,CAAlB,CAAnB,EAAyC;AACtCC,gBAAAA,IAAI,EAAE;AADgC,eAAzC,CAVL,CADJ;AAgBH,aAlBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAFI,SARhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ,EAqCI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,OAAD;AACI,QAAA,KAAK,EAAC,WADV;AAEI,QAAA,eAAe,EAAE;AACblD,UAAAA,KAAK,EAAG;AACJiC,YAAAA,KAAK,EAAE;AADH;AADK,SAFrB;AAOI,QAAA,KAAK,EAAE;AAACH,UAAAA,SAAS,EAAE;AAAZ,SAPX;AAQI,QAAA,UAAU,EAAE;AACRgB,UAAAA,cAAc,EACV;AAAK,YAAA,KAAK,EAAE;AAAChC,cAAAA,KAAK,EAAE;AAAR,aAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACI,oBAAC,cAAD;AACI,YAAA,SAAS,EAAE,mBAAAiC,QAAQ,EAAI;AACnB,qBACI,6CAASA,QAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACI;AACI,gBAAA,EAAE,EAAC,WADP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAEI;AAAM,gBAAA,MAAM,EAAC,KAAb;AACM,gBAAA,SAAS,EAAElG,MAAM,CAAC,GAAD,CADvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,EAII;AAAM,gBAAA,MAAM,EAAC,KAAb;AACM,gBAAA,SAAS,EAAEC,IAAI,CAAC,GAAD,CADrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJJ,CADJ,CADJ,EAUKpB,KAAK,CAACsH,YAAN,CAAmBD,QAAQ,CAACE,QAAT,CAAkB,CAAlB,CAAnB,EAAyC;AACtCC,gBAAAA,IAAI,EAAE;AADgC,eAAzC,CAVL,CADJ;AAgBH,aAlBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAFI,SARhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CArCJ,EAyEI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,OAAD;AACI,QAAA,KAAK,EAAC,UADV;AAEI,QAAA,eAAe,EAAE;AACblD,UAAAA,KAAK,EAAG;AACJiC,YAAAA,KAAK,EAAE;AADH;AADK,SAFrB;AAOI,QAAA,KAAK,EAAE;AAACH,UAAAA,SAAS,EAAE;AAAZ,SAPX;AAQI,QAAA,UAAU,EAAE;AACRgB,UAAAA,cAAc,EACV;AAAK,YAAA,KAAK,EAAE;AAAChC,cAAAA,KAAK,EAAE;AAAR,aAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACI,oBAAC,cAAD;AACI,YAAA,SAAS,EAAE,mBAAAiC,QAAQ,EAAI;AACnB,qBACI,6CAASA,QAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACI;AACI,gBAAA,EAAE,EAAC,WADP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAEI;AAAM,gBAAA,MAAM,EAAC,KAAb;AACM,gBAAA,SAAS,EAAElG,MAAM,CAAC,GAAD,CADvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,EAII;AAAM,gBAAA,MAAM,EAAC,KAAb;AACM,gBAAA,SAAS,EAAEC,IAAI,CAAC,GAAD,CADrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJJ,CADJ,CADJ,EAUKpB,KAAK,CAACsH,YAAN,CAAmBD,QAAQ,CAACE,QAAT,CAAkB,CAAlB,CAAnB,EAAyC;AACtCC,gBAAAA,IAAI,EAAE;AADgC,eAAzC,CAVL,CADJ;AAgBH,aAlBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAFI,SARhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CAzEJ,EA6GI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,OAAD;AACI,QAAA,KAAK,EAAC,OADV;AAEI,QAAA,eAAe,EAAE;AACblD,UAAAA,KAAK,EAAG;AACJiC,YAAAA,KAAK,EAAE;AADH;AADK,SAFrB;AAOI,QAAA,KAAK,EAAE;AAACH,UAAAA,SAAS,EAAE,MAAZ;AAAoB6B,UAAAA,YAAY,EAAE;AAAlC,SAPX;AAQI,QAAA,UAAU,EAAE;AACRb,UAAAA,cAAc,EACV;AAAK,YAAA,KAAK,EAAE;AAAChC,cAAAA,KAAK,EAAE;AAAR,aAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACI,oBAAC,SAAD;AACI,YAAA,SAAS,EAAE,mBAAAiC,QAAQ,EAAI;AACnB,qBACI,6CAASA,QAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACI;AACI,gBAAA,EAAE,EAAC,WADP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAEI;AAAM,gBAAA,MAAM,EAAC,KAAb;AACM,gBAAA,SAAS,EAAElG,MAAM,CAAC,GAAD,CADvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,EAII;AAAM,gBAAA,MAAM,EAAC,KAAb;AACM,gBAAA,SAAS,EAAEC,IAAI,CAAC,GAAD,CADrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJJ,CADJ,CADJ,EAUKpB,KAAK,CAACsH,YAAN,CAAmBD,QAAQ,CAACE,QAAT,CAAkB,CAAlB,CAAnB,EAAyC;AACtCC,gBAAAA,IAAI,EAAE;AADgC,eAAzC,CAVL,CADJ;AAgBH,aAlBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAFI,SARhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CA7GJ,CARJ,CA1VJ,CARJ,CALJ,EAogBI,oBAAC,GAAD;AAAK,QAAA,KAAK,EAAEzF,eAAe,CAAC0C,QAAhB,CAAyBkB,cAAzB,KAA4C,MAA5C,GAAqD,KAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,WAAD;AACI,QAAA,OAAO,EAAC,WADZ;AAEI,QAAA,KAAK,EAAC,SAFV;AAGI,QAAA,OAAO,EAAE,mBAAM;AACX,UAAA,MAAI,CAACF,QAAL,CAAc;AAAC5B,YAAAA,OAAO,EAAE;AAAV,WAAd;;AACAmC,UAAAA,UAAU,CAAC,YAAM;AACb,YAAA,MAAI,CAACP,QAAL,CAAc;AAAC5B,cAAAA,OAAO,EAAE,CAAV;AAAaM,cAAAA,MAAM,EAAE;AAArB,aAAd;AACH,WAFS,EAEP,IAFO,CAAV;AAGH,SARL;AASI,QAAA,KAAK,EAAE;AACHuD,UAAAA,OAAO,EAAE,MADN;AAEHxB,UAAAA,QAAQ,EAAE,UAFP;AAGHgC,UAAAA,GAAG,EAAE,OAHF;AAIH9C,UAAAA,KAAK,EAAE,OAJJ;AAKHG,UAAAA,MAAM,EAAE,MALL;AAMHwB,UAAAA,MAAM,EAAE;AANL,SATX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAiBK,KAAKnD,KAAL,CAAWG,kBAAX,GAAgC,SAAhC,GAA4C,SAjBjD,CADJ,CADJ,CApgBJ,CALJ,CALJ,CAVJ,CADJ,CArEJ,CADJ;AA6nBH;;;;EAnuBkB9D,S;;AAsuBvByD,QAAQ,CAACyE,SAAT,GAAqB;AACjBxF,EAAAA,OAAO,EAAET,SAAS,CAACkG,MAAV,CAAiBC;AADT,CAArB;AAIA,eAAelG,UAAU,CAACkB,SAAD,CAAV,CAAsBK,QAAtB,CAAf","sourcesContent":["import React, {Component} from 'react';\nimport LoginButton from \"./controls/Buttons\";\nimport Container from \"@material-ui/core/Container\";\nimport {Box} from \"@material-ui/core\";\nimport Card from \"@material-ui/core/Card\";\nimport TextField from \"@material-ui/core/TextField\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport IconButton from '@material-ui/core/IconButton';\nimport PersonIcon from '@material-ui/icons/Person';\nimport clsx from \"clsx\";\nimport {Grade, Visibility, VisibilityOff} from \"@material-ui/icons\";\nimport {blue, lightBlue, green, red, yellow, purple, grey} from \"@material-ui/core/colors\";\nimport VpnKeyIcon from '@material-ui/icons/VpnKey';\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Link from \"@material-ui/core/Link\";\nimport {AnimatedRotation, AnimatedPosition} from 'react-declare-animate';\nimport PhoneIcon from '@material-ui/icons/Phone';\nimport TextFormatIcon from '@material-ui/icons/TextFormat';\nimport EmailIcon from '@material-ui/icons/Email';\nimport Animate from \"react-smooth\";\nimport GraphicsHandler from './handlers/GraphicsHandler';\nimport Redirect from \"react-router-dom/Redirect\";\nimport Center from 'react-center';\nimport PropTypes from \"prop-types\";\nimport withStyles from \"@material-ui/core/styles/withStyles\";\nimport TextBox from \"./controls/TextBox\";\nimport posed from 'react-pose';\n\nconst LoginBox = posed.div({\n    visible: { opacity: 1 },\n    hidden: { opacity: 0 }\n});\n\nlet classes = {};\n\nlet useStyles = makeStyles(theme => ({\n    root: {\n        display: 'flex',\n        flexWrap: 'wrap',\n    },\n    margin: {\n        margin: theme.spacing(1),\n    },\n    textField: {\n        flexBasis: 200,\n    }\n}));\n\nconst inClasses = {\n    rootInput: {\n        background: 'transparent'\n    },\n};\n\nfunction StylePreparer(props) {\n\n    classes = useStyles();\n\n    return (<Box/>);\n}\n\nclass AuthPage extends Component {\n\n    mobileWidth = 700;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: 0,\n            signupForCardAngles: false,\n            signupForFormItems: false,\n            forecasts: [],\n            resizeTrigger: false,\n            showPassword: false,\n            goHome: false\n        };\n        document.body.style.overflowX = 'hidden';\n        document.body.style.overflowY = 'hidden';\n        GraphicsHandler.instance = new GraphicsHandler();\n        this.scrollTopTargetRef = React.createRef();\n        this.loadingViewRef = React.createRef();\n        this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n        this.handleScrollReset = this.handleScrollReset.bind(this);\n        this.forceScrollReset = this.forceScrollReset.bind(this);\n        // setTimeout(() => {\n        //     this.setState({loading: 1});\n        //     setTimeout(() => {\n        //         this.setState({loading: 2});\n        //         setTimeout(() => {\n        //             this.setState({loading: 3});\n        //             if (GraphicsHandler.instance.isLongMobileScreen()) {\n        //                 document.body.style.overflowY = 'hidden';\n        //                 this.forceScrollReset();\n        //             } else\n        //                 document.body.style.overflowY = 'auto';\n        //         }, 1250);\n        //     }, 3000);\n        // }, 1500);\n    }\n\n    componentDidMount() {\n        this.updateWindowDimensions();\n        window.addEventListener('resize', this.updateWindowDimensions);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.updateWindowDimensions);\n    }\n\n    updateWindowDimensions() {\n        GraphicsHandler.instance.width = window.innerWidth / GraphicsHandler.instance.density;\n        GraphicsHandler.instance.height = window.innerHeight / GraphicsHandler.instance.density;\n        this.setState({resizeTrigger: !this.state.resizeTrigger});\n    }\n\n    measureAuthCardHeight() {\n        if (this.state.loading >= 3) {\n            if (GraphicsHandler.instance.isLongMobileScreen()) {\n                document.body.style.overflowY = 'hidden';\n                this.forceScrollReset();\n            } else\n                document.body.style.overflowY = 'auto';\n        }\n        return GraphicsHandler.instance.isMobileScreen() ?\n            this.state.signupForFormItems ?\n                '17cm' :\n                '10cm' :\n            this.state.signupForFormItems ?\n                GraphicsHandler.instance.dpToPx(400) :\n                GraphicsHandler.instance.dpToPx(350);\n    }\n\n    measureAuthCardWidth() {\n        return GraphicsHandler.instance.isMobileScreen() ?\n            GraphicsHandler.instance.isWideMobileScreen() ?\n                GraphicsHandler.instance.dpToPx(GraphicsHandler.instance.width) / 2 :\n                GraphicsHandler.instance.dpToPx(GraphicsHandler.instance.width) * 4 / 5 :\n            GraphicsHandler.instance.dpToPx(700);\n    }\n\n    handleScrollReset() {\n        if (this.state.loading === 1) {\n            window.scrollTo(0, 0);\n        }\n    }\n\n    forceScrollReset() {\n        window.scrollTo(0, 0);\n    }\n\n    render() {\n\n        if (this.state.goHome) {\n            return <Redirect to='/Home'/>\n        }\n\n        if (classes === undefined) {\n            setTimeout(() => {\n                this.forceUpdate();\n            }, 500);\n            return (<StylePreparer/>);\n        }\n\n        return (\n            <div style={{\n                width: '100%',\n                height: '100vh'\n            }}\n                 onLoadStart={this.handleScrollReset()}>\n                <div ref={this.scrollTopTargetRef} style={{width: '0px', height: '0px'}}/>\n                <div style={{\n                    position: 'relative'\n                }}>\n                    <Animate isActive={this.state.loading === 2}\n                             duration={2000}\n                             to=\"0\"\n                             from=\"1\"\n                             attributeName=\"opacity\"\n                             style={{\n                                 position: 'absolute',\n                                 margin: 0\n                             }}>\n                        <Box\n                            style={{\n                                opacity: 1,\n                                width: '100%',\n                                height: '100%',\n                                backgroundColor: '#000',\n                                position: 'absolute',\n                                margin: 0\n                            }}/>\n                    </Animate>\n                    <Animate isActive={this.state.loading > 0} duration={2500} to={this.state.loading === 1 ? 1 : 0}\n                             from={this.state.loading === 1 ? 0 : 1}\n                             attributeName=\"opacity\"\n                             style={{\n                                 position: 'absolute',\n                                 margin: 0\n                             }}>\n                        <Box\n                            style={{\n                                width: '100%',\n                                height: '100vh',\n                                position: 'absolute',\n                                margin: 0,\n                                opacity: 0,\n                                marginTop: (() => {\n                                    if (this.loadingViewRef.current === null)\n                                        return 0;\n                                    else {\n                                        return (GraphicsHandler.instance.dpToPx(GraphicsHandler.instance.height)\n                                            - this.loadingViewRef.current.clientHeight) / 2;\n                                    }\n                                })()\n                            }}>\n                            <Center>\n                                <Box ref={this.loadingViewRef}>\n                                    <Center>\n\n                                    </Center>\n                                    <h4\n                                        style={{\n                                            color: '#fff',\n                                            width: '100%',\n                                            height: '100%',\n                                            marginTop: 56,\n                                            textAlign: 'center'\n                                        }}>Welcome to Hormoz platform</h4>\n                                </Box>\n                            </Center>\n                        </Box>\n                    </Animate>\n                </div>\n                <Center>\n                    <LoginBox\n                        duration={1500}\n                        top={this.state.loading < 3 || this.state.loading > 3 ?\n                            GraphicsHandler.instance.height * 1.5 :\n                            GraphicsHandler.instance.isMobileScreen() ?\n                                Math.max(2, GraphicsHandler.instance.isLongMobileScreen() ?\n                                    GraphicsHandler.instance.cmHeight * 20 / 100 :\n                                    GraphicsHandler.instance.cmHeight * 10 / 100) + 'cm' :\n                                Math.max(72, (GraphicsHandler.instance.dpToPx(GraphicsHandler.instance.height)\n                                    - GraphicsHandler.instance.dpToPx(this.measureAuthCardHeight())) / 2)}>\n                        <AnimatedRotation\n                            duration={2500}\n                            angleX={this.state.signupForCardAngles ? 3.14 : 0}\n                            angleY={this.state.signupForCardAngles ? 3.14 : 0}\n                            angleZ={this.state.signupForCardAngles ? 3.14 : 0}>\n                            <Animate isActive={this.state.loading >= 3}\n                                     duration={1500}\n                                     to={this.state.loading === 3 ? 1 : 0}\n                                     from={this.state.loading === 3 ? 0 : 1}\n                                     attributeName=\"opacity\">\n                                <Box\n                                    width={this.measureAuthCardWidth()}\n                                    style={{\n                                        opacity: 0\n                                    }}>\n                                    <Card\n                                        width={this.measureAuthCardWidth()}\n                                        style={{\n                                            borderRadius: '12px 12px 12px 12px',\n                                            zIndex: '2',\n                                            backdropFilter: 'blur(10px)',\n                                            background: GraphicsHandler.instance.mainGradient(0.45)\n                                        }}>\n                                        <Box\n                                            width={'100%'}\n                                            height={this.measureAuthCardHeight()}>\n                                            <Box\n                                                width={\n                                                    GraphicsHandler.instance.isMobileScreen() ?\n                                                        '100%' :\n                                                        '49%'\n                                                }\n                                                height={this.measureAuthCardHeight()}\n                                                style={{float: 'left'}}>\n                                                <form>\n                                                    <Center>\n                                                        <TextBox\n                                                            label=\"Username\"\n                                                            InputLabelProps={{\n                                                                style: ({\n                                                                    color: '#fff'\n                                                                })\n                                                            }}\n                                                            style={{\n                                                                width: '80%',\n                                                                marginTop: '56px',\n                                                                '& .MuiInput-underline': {\n                                                                    borderBottomColor: 'green',\n                                                                    color: 'green'\n                                                                }\n                                                            }}\n                                                            InputProps={{\n                                                                startAdornment: (\n                                                                    <div style={{width: '48px'}}>\n                                                                        <PersonIcon\n                                                                            component={svgProps => {\n                                                                                return (\n                                                                                    <svg {...svgProps}>\n                                                                                        <defs>\n                                                                                            <linearGradient\n                                                                                                id=\"gradient1\">\n                                                                                                <stop offset=\"30%\"\n                                                                                                      stopColor={blue[400]}/>\n                                                                                                <stop offset=\"70%\"\n                                                                                                      stopColor={red[400]}/>\n                                                                                            </linearGradient>\n                                                                                        </defs>\n                                                                                        {React.cloneElement(svgProps.children[0], {\n                                                                                            fill: 'url(#gradient1)',\n                                                                                        })}\n                                                                                    </svg>\n                                                                                );\n                                                                            }}/>\n                                                                    </div>\n                                                                )\n                                                            }}\n                                                        />\n                                                    </Center>\n                                                    <Center>\n                                                        <TextBox\n                                                            id=\"outlined-adornment-password\"\n                                                            className={clsx(classes.margin, classes.textField)}\n                                                            type={this.state.showPassword ? 'text' : 'password'}\n                                                            label=\"Password\"\n                                                            InputLabelProps={{\n                                                                style: ({\n                                                                    color: '#fff'\n                                                                })\n                                                            }}\n                                                            style={{width: '80%', marginTop: '24px'}}\n                                                            InputProps={{\n                                                                startAdornment: (\n                                                                    <div style={{width: '48px'}}>\n                                                                        <VpnKeyIcon\n                                                                            component={svgProps => {\n                                                                                return (\n                                                                                    <svg {...svgProps}>\n                                                                                        <defs>\n                                                                                            <linearGradient\n                                                                                                id=\"gradient2\">\n                                                                                                <stop offset=\"30%\"\n                                                                                                      stopColor={green[400]}/>\n                                                                                                <stop offset=\"70%\"\n                                                                                                      stopColor={yellow[600]}/>\n                                                                                            </linearGradient>\n                                                                                        </defs>\n                                                                                        {React.cloneElement(svgProps.children[0], {\n                                                                                            fill: 'url(#gradient2)',\n                                                                                        })}\n                                                                                    </svg>\n                                                                                );\n                                                                            }}/>\n                                                                    </div>\n                                                                ),\n                                                                endAdornment: (\n                                                                    <div style={{width: '48px'}}>\n                                                                        <IconButton\n                                                                            href={''}\n                                                                            style={{outline: 'none'}}\n                                                                            onClick={() => {\n                                                                                this.setState({showPassword: !this.state.showPassword});\n                                                                            }}>\n                                                                            {this.state.showPassword ?\n                                                                                <Visibility/> :\n                                                                                <VisibilityOff/>}\n                                                                        </IconButton>\n                                                                    </div>\n                                                                )\n                                                            }}\n                                                        />\n                                                    </Center>\n                                                    <Container\n                                                        hidden={!this.state.signupForFormItems || GraphicsHandler.instance.width > this.mobileWidth}>\n                                                        <Center>\n                                                            <TextField\n                                                                className={clsx(classes.margin, classes.textField)}\n                                                                label=\"Email\"\n                                                                style={{marginTop: '24px'}}\n                                                                InputProps={{\n                                                                    startAdornment: (\n                                                                        <div style={{width: '48px'}}>\n                                                                            <EmailIcon\n                                                                                component={svgProps => {\n                                                                                    return (\n                                                                                        <svg {...svgProps}>\n                                                                                            <defs>\n                                                                                                <linearGradient\n                                                                                                    id=\"gradient7\">\n                                                                                                    <stop\n                                                                                                        offset=\"30%\"\n                                                                                                        stopColor={purple[400]}/>\n                                                                                                    <stop\n                                                                                                        offset=\"70%\"\n                                                                                                        stopColor={grey[400]}/>\n                                                                                                </linearGradient>\n                                                                                            </defs>\n                                                                                            {React.cloneElement(svgProps.children[0], {\n                                                                                                fill: 'url(#gradient7)',\n                                                                                            })}\n                                                                                        </svg>\n                                                                                    );\n                                                                                }}/>\n                                                                        </div>\n                                                                    )\n                                                                }}\n                                                            />\n                                                        </Center>\n                                                        <Center>\n                                                            <TextField\n                                                                id=\"outlined-adornment-password\"\n                                                                className={clsx(classes.margin, classes.textField)}\n                                                                label=\"FirstName\"\n                                                                style={{marginTop: '24px'}}\n                                                                InputProps={{\n                                                                    startAdornment: (\n                                                                        <div style={{width: '48px'}}>\n                                                                            <TextFormatIcon\n                                                                                component={svgProps => {\n                                                                                    return (\n                                                                                        <svg {...svgProps}>\n                                                                                            <defs>\n                                                                                                <linearGradient\n                                                                                                    id=\"gradient8\">\n                                                                                                    <stop\n                                                                                                        offset=\"30%\"\n                                                                                                        stopColor={purple[400]}/>\n                                                                                                    <stop\n                                                                                                        offset=\"70%\"\n                                                                                                        stopColor={grey[400]}/>\n                                                                                                </linearGradient>\n                                                                                            </defs>\n                                                                                            {React.cloneElement(svgProps.children[0], {\n                                                                                                fill: 'url(#gradient8)',\n                                                                                            })}\n                                                                                        </svg>\n                                                                                    );\n                                                                                }}/>\n                                                                        </div>\n                                                                    )\n                                                                }}\n                                                            />\n                                                        </Center>\n                                                        <Center>\n                                                            <TextField\n                                                                id=\"outlined-adornment-password\"\n                                                                className={clsx(classes.margin, classes.textField)}\n                                                                label=\"LastName\"\n                                                                style={{marginTop: '24px'}}\n                                                                InputProps={{\n                                                                    startAdornment: (\n                                                                        <div style={{width: '48px'}}>\n                                                                            <TextFormatIcon\n                                                                                component={svgProps => {\n                                                                                    return (\n                                                                                        <svg {...svgProps}>\n                                                                                            <defs>\n                                                                                                <linearGradient\n                                                                                                    id=\"gradient9\">\n                                                                                                    <stop\n                                                                                                        offset=\"30%\"\n                                                                                                        stopColor={purple[400]}/>\n                                                                                                    <stop\n                                                                                                        offset=\"70%\"\n                                                                                                        stopColor={grey[400]}/>\n                                                                                                </linearGradient>\n                                                                                            </defs>\n                                                                                            {React.cloneElement(svgProps.children[0], {\n                                                                                                fill: 'url(#gradient9)',\n                                                                                            })}\n                                                                                        </svg>\n                                                                                    );\n                                                                                }}/>\n                                                                        </div>\n                                                                    )\n                                                                }}\n                                                            />\n                                                        </Center>\n                                                        <Center>\n                                                            <TextField\n                                                                id=\"outlined-adornment-password\"\n                                                                className={clsx(classes.margin, classes.textField)}\n                                                                label=\"Phone\"\n                                                                style={{marginTop: '24px'}}\n                                                                InputProps={{\n                                                                    startAdornment: (\n                                                                        <div style={{width: '48px'}}>\n                                                                            <PhoneIcon\n                                                                                component={svgProps => {\n                                                                                    return (\n                                                                                        <svg {...svgProps}>\n                                                                                            <defs>\n                                                                                                <linearGradient\n                                                                                                    id=\"gradient10\">\n                                                                                                    <stop\n                                                                                                        offset=\"30%\"\n                                                                                                        stopColor={purple[400]}/>\n                                                                                                    <stop\n                                                                                                        offset=\"70%\"\n                                                                                                        stopColor={grey[400]}/>\n                                                                                                </linearGradient>\n                                                                                            </defs>\n                                                                                            {React.cloneElement(svgProps.children[0], {\n                                                                                                fill: 'url(#gradient10)',\n                                                                                            })}\n                                                                                        </svg>\n                                                                                    );\n                                                                                }}/>\n                                                                        </div>\n                                                                    )\n                                                                }}\n                                                            />\n                                                        </Center>\n                                                    </Container>\n                                                </form>\n                                                <Container hidden={this.state.signupForFormItems} height={'32px'}>\n                                                    <Center>\n                                                        <Box height={'32px'}\n                                                             style={{width: '80%', marginTop: '12px'}}>\n                                                            <FormControlLabel\n                                                                style={{\n                                                                    color: '#fff'\n                                                                }}\n                                                                control={\n                                                                    <Checkbox style={{\n                                                                        color: '#fff'\n                                                                    }}/>\n                                                                }\n                                                                label=\"Remember password\"/>\n                                                        </Box>\n                                                    </Center>\n                                                </Container>\n                                                <Center>\n                                                    <Box\n                                                        marginTop={'2em'}\n                                                        style={{width: '80%'}}>\n                                                        <Link\n                                                            style={{\n                                                                color: '#fff'\n                                                            }}\n                                                            component=\"button\"\n                                                            variant=\"body2\"\n                                                            onClick={() => {\n                                                                let currState = this.state.signupForCardAngles;\n                                                                currState = !currState;\n                                                                this.setState({signupForCardAngles: !this.state.signupForCardAngles});\n                                                                if (GraphicsHandler.instance.isMobileScreen() && !currState) {\n                                                                    this.scrollTopTargetRef.current.scrollIntoView({behavior: 'smooth'});\n                                                                }\n                                                                setTimeout(() => {\n                                                                    this.setState({signupForFormItems: !this.state.signupForFormItems});\n                                                                    if (GraphicsHandler.instance.isMobileScreen() && this.state.signupForFormItems) {\n                                                                        document.body.style.overflowY = 'auto';\n                                                                    } else {\n                                                                        if (GraphicsHandler.instance.isLongMobileScreen()) {\n                                                                            document.body.style.overflowY = 'hidden';\n                                                                            this.forceScrollReset();\n                                                                        } else\n                                                                            document.body.style.overflowY = 'auto';\n                                                                    }\n                                                                }, 700);\n                                                            }}>\n                                                            {this.state.signupForFormItems ? 'Already have an account ?' : 'Dont you have an account ?'}\n                                                        </Link>\n                                                    </Box>\n                                                </Center>\n                                            </Box>\n                                            <Container\n                                                width={'1px'}\n                                                height={this.signupForFormItems ? this.measureAuthCardHeight() : this.measureAuthCardHeight()}\n                                                hidden={GraphicsHandler.instance.isMobileScreen() || !this.state.signupForFormItems}>\n                                                <Box\n                                                    marginTop={GraphicsHandler.instance.dpToPx(1.5)}\n                                                    width={'1px'}\n                                                    height={this.measureAuthCardHeight()}\n                                                    style={{backgroundColor: '#fff', float: 'left'}}>\n                                                </Box>\n                                            </Container>\n                                            <Box\n                                                width={'50%'}\n                                                hidden={this.state.signupForFormItems || (GraphicsHandler.instance.isMobileScreen())}\n                                                style={{\n                                                    float: 'right',\n                                                    background: GraphicsHandler.instance.secondaryGradient(),\n                                                    height: '100%'\n                                                }}>\n                                                <Center><h3\n                                                    style={{marginTop: '56px', color: '#ffffff'}}>Welcome\n                                                    to\n                                                    project</h3></Center>\n                                                <Center><h2 style={{color: '#fff'}}>Hormoz</h2>\n                                                </Center>\n                                                <Center><h6 style={{\n                                                    marginTop: '24px',\n                                                    marginLeft: '24px',\n                                                    marginRight: '24px',\n                                                    color: '#ffffff'\n                                                }}>This is a project for building IOT networks in your home. This is\n                                                    a\n                                                    project\n                                                    for\n                                                    building IOT networks in your home. This is a project for\n                                                    building\n                                                    IOT\n                                                    networks\n                                                    in\n                                                    your home. This is a project for building IOT networks in your\n                                                    home.</h6>\n                                                </Center>\n                                            </Box>\n                                            <Container\n                                                style={{\n                                                    width: this.state.resizeTrigger ?\n                                                        GraphicsHandler.instance.isMobileScreen() ? '100%' : '50%' :\n                                                        GraphicsHandler.instance.isMobileScreen() ? '100%' : '50%',\n                                                    float: 'right'\n                                                }}\n                                                hidden={!this.state.signupForFormItems || GraphicsHandler.instance.isMobileScreen()}>\n                                                <form>\n                                                    <Center>\n                                                        <TextBox\n                                                            label=\"Email\"\n                                                            InputLabelProps={{\n                                                                style: ({\n                                                                    color: '#fff'\n                                                                })\n                                                            }}\n                                                            style={{marginTop: '56px'}}\n                                                            InputProps={{\n                                                                startAdornment: (\n                                                                    <div style={{width: '48px'}}>\n                                                                        <EmailIcon\n                                                                            component={svgProps => {\n                                                                                return (\n                                                                                    <svg {...svgProps}>\n                                                                                        <defs>\n                                                                                            <linearGradient\n                                                                                                id=\"gradient3\">\n                                                                                                <stop offset=\"30%\"\n                                                                                                      stopColor={purple[400]}/>\n                                                                                                <stop offset=\"70%\"\n                                                                                                      stopColor={grey[400]}/>\n                                                                                            </linearGradient>\n                                                                                        </defs>\n                                                                                        {React.cloneElement(svgProps.children[0], {\n                                                                                            fill: 'url(#gradient3)',\n                                                                                        })}\n                                                                                    </svg>\n                                                                                );\n                                                                            }}/>\n                                                                    </div>\n                                                                )\n                                                            }}\n                                                        />\n                                                    </Center>\n                                                    <Center>\n                                                        <TextBox\n                                                            label=\"FirstName\"\n                                                            InputLabelProps={{\n                                                                style: ({\n                                                                    color: '#fff'\n                                                                })\n                                                            }}\n                                                            style={{marginTop: '24px'}}\n                                                            InputProps={{\n                                                                startAdornment: (\n                                                                    <div style={{width: '48px'}}>\n                                                                        <TextFormatIcon\n                                                                            component={svgProps => {\n                                                                                return (\n                                                                                    <svg {...svgProps}>\n                                                                                        <defs>\n                                                                                            <linearGradient\n                                                                                                id=\"gradient4\">\n                                                                                                <stop offset=\"30%\"\n                                                                                                      stopColor={purple[400]}/>\n                                                                                                <stop offset=\"70%\"\n                                                                                                      stopColor={grey[400]}/>\n                                                                                            </linearGradient>\n                                                                                        </defs>\n                                                                                        {React.cloneElement(svgProps.children[0], {\n                                                                                            fill: 'url(#gradient4)',\n                                                                                        })}\n                                                                                    </svg>\n                                                                                );\n                                                                            }}/>\n                                                                    </div>\n                                                                )\n                                                            }}\n                                                        />\n                                                    </Center>\n                                                    <Center>\n                                                        <TextBox\n                                                            label=\"LastName\"\n                                                            InputLabelProps={{\n                                                                style: ({\n                                                                    color: '#fff'\n                                                                })\n                                                            }}\n                                                            style={{marginTop: '24px'}}\n                                                            InputProps={{\n                                                                startAdornment: (\n                                                                    <div style={{width: '48px'}}>\n                                                                        <TextFormatIcon\n                                                                            component={svgProps => {\n                                                                                return (\n                                                                                    <svg {...svgProps}>\n                                                                                        <defs>\n                                                                                            <linearGradient\n                                                                                                id=\"gradient5\">\n                                                                                                <stop offset=\"30%\"\n                                                                                                      stopColor={purple[400]}/>\n                                                                                                <stop offset=\"70%\"\n                                                                                                      stopColor={grey[400]}/>\n                                                                                            </linearGradient>\n                                                                                        </defs>\n                                                                                        {React.cloneElement(svgProps.children[0], {\n                                                                                            fill: 'url(#gradient5)',\n                                                                                        })}\n                                                                                    </svg>\n                                                                                );\n                                                                            }}/>\n                                                                    </div>\n                                                                )\n                                                            }}\n                                                        />\n                                                    </Center>\n                                                    <Center>\n                                                        <TextBox\n                                                            label=\"Phone\"\n                                                            InputLabelProps={{\n                                                                style: ({\n                                                                    color: '#fff'\n                                                                })\n                                                            }}\n                                                            style={{marginTop: '24px', marginBottom: '48px'}}\n                                                            InputProps={{\n                                                                startAdornment: (\n                                                                    <div style={{width: '48px'}}>\n                                                                        <PhoneIcon\n                                                                            component={svgProps => {\n                                                                                return (\n                                                                                    <svg {...svgProps}>\n                                                                                        <defs>\n                                                                                            <linearGradient\n                                                                                                id=\"gradient6\">\n                                                                                                <stop offset=\"30%\"\n                                                                                                      stopColor={purple[400]}/>\n                                                                                                <stop offset=\"70%\"\n                                                                                                      stopColor={grey[400]}/>\n                                                                                            </linearGradient>\n                                                                                        </defs>\n                                                                                        {React.cloneElement(svgProps.children[0], {\n                                                                                            fill: 'url(#gradient6)',\n                                                                                        })}\n                                                                                    </svg>\n                                                                                );\n                                                                            }}/>\n                                                                    </div>\n                                                                )\n                                                            }}\n                                                        />\n                                                    </Center>\n                                                </form>\n                                            </Container>\n                                        </Box>\n                                    </Card>\n                                    <Box width={GraphicsHandler.instance.isMobileScreen() ? '100%' : '50%'}>\n                                        <Center>\n                                            <LoginButton\n                                                variant=\"contained\"\n                                                color=\"primary\"\n                                                onClick={() => {\n                                                    this.setState({loading: 4});\n                                                    setTimeout(() => {\n                                                        this.setState({loading: 5, goHome: true});\n                                                    }, 1000);\n                                                }}\n                                                style={{\n                                                    outline: 'none',\n                                                    position: 'relative',\n                                                    top: '-24px',\n                                                    width: '100px',\n                                                    height: '48px',\n                                                    zIndex: '3',\n                                                }}>\n                                                {this.state.signupForFormItems ? 'Sign Up' : 'Sign In'}\n                                            </LoginButton>\n                                        </Center>\n                                    </Box>\n                                </Box>\n                            </Animate>\n                        </AnimatedRotation>\n                    </LoginBox>\n                </Center>\n            </div>\n        );\n    }\n}\n\nAuthPage.propTypes = {\n    classes: PropTypes.object.isRequired\n};\n\nexport default withStyles(inClasses)(AuthPage);\n\n"]},"metadata":{},"sourceType":"module"}