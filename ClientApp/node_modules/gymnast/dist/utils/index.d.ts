import { Noop, SpacingAliases, SpacingProps, SpacingValues, ConfigDefaults } from '../types';
export declare const splitPattern: RegExp;
export declare const noop: Noop;
export declare const times: (n: number) => any[];
export declare const kebabCase: (str: string) => string;
export declare function validateSpacingProps(props: SpacingProps & {
    marginArray?: Array<number> | void;
    paddingArray?: Array<number> | void;
}): boolean;
export declare function getCSS(prop: string | void, value: number | string | void, base: number): {
    [CSSProp: string]: number;
};
/**
 * parseSpacing allows using different kinds of input for spacing parameters. Instead of allowing
 * only number arrays, the following are also valid:
 *
 * - arrays of strings or numbers (converted to float):
 *   - `margin={["1", 0, "0.5"]}` becomes `[1, 0, 0.5]`
 * - space-separated or comma-separated strings
 *   - `margin="0"` becomes `[0]`
 *   - `margin="1 0"` becomes `[1, 0]`
 *   - `margin="1,0"` becomes `[2, 0]`
 * - numbers
 *   - `margin={1}` becomes `[1]`
 */
export declare function parseSpacing(spacing: any, spacingAliases: SpacingAliases | void): number[] | void;
export declare function replaceSpacingAliases(spacingArray: Array<SpacingValues>, spacingAliases: SpacingAliases | void): Array<SpacingValues>;
declare type CombineSpacingSettings = {
    spacingProps: SpacingProps;
    base: number;
    spacingAliases?: SpacingAliases;
    gutter?: number;
    verticalGutter?: number;
};
export declare function combineSpacing({ spacingProps, base, spacingAliases, gutter, verticalGutter, }: CombineSpacingSettings): {};
export declare function toCXS(raw: {
    [CSSProp: string]: string | number | {};
}): {
    [CSSProp: string]: string;
};
export declare function getValue<A>(context: {
    [key: string]: any;
} | undefined, property: keyof ConfigDefaults, override?: A): A;
export declare function getValues<C extends {}, D extends {}>(context?: C, overrides?: D): ConfigDefaults;
export declare function accumulateOver(props: Array<string>): (acc: any, current: any) => any;
declare const _default: {
    accumulateOver: typeof accumulateOver;
    combineSpacing: typeof combineSpacing;
    getCSS: typeof getCSS;
    getValue: typeof getValue;
    getValues: typeof getValues;
    noop: Noop;
    parseSpacing: typeof parseSpacing;
    replaceSpacingAliases: typeof replaceSpacingAliases;
    splitPattern: RegExp;
    times: (n: number) => any[];
    toCXS: typeof toCXS;
    validateSpacingProps: typeof validateSpacingProps;
};
export default _default;
