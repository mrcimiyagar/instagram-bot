/**
 * Flowtype definitions for index
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.10.0
 * @flow
 */

import {
  Noop,
  SpacingAliases,
  SpacingProps,
  SpacingValues,
  ConfigDefaults
} from "../types";
declare export var splitPattern: RegExp;
declare export var noop: Noop;
declare export var times: (n: number) => any[];
declare export var kebabCase: (str: string) => string;
declare export function validateSpacingProps(
  props: SpacingProps & {
    marginArray?: Array<number> | void,
    paddingArray?: Array<number> | void,
    ...
  }
): boolean;
declare export function getCSS(
  prop: string | void,
  value: number | string | void,
  base: number
): {
  [CSSProp: string]: number,
  ...
};

/**
 * parseSpacing allows using different kinds of input for spacing parameters. Instead of allowing
 * only number arrays, the following are also valid:
 *
 * - arrays of strings or numbers (converted to float):
 *    - `margin={["1", 0, "0.5"]}` becomes `[1, 0, 0.5]`
 * - space-separated or comma-separated strings
 *    - `margin="0"` becomes `[0]`
 *    - `margin="1 0"` becomes `[1, 0]`
 *    - `margin="1,0"` becomes `[2, 0]`
 * - numbers
 *    - `margin={1}` becomes `[1]`
 */
declare export function parseSpacing(
  spacing: any,
  spacingAliases: SpacingAliases | void
): number[] | void;
declare export function replaceSpacingAliases(
  spacingArray: Array<SpacingValues>,
  spacingAliases: SpacingAliases | void
): Array<SpacingValues>;
declare type CombineSpacingSettings = {
  spacingProps: SpacingProps,
  base: number,
  spacingAliases?: SpacingAliases,
  gutter?: number,
  verticalGutter?: number,
  ...
};
declare export function combineSpacing(x: CombineSpacingSettings): { ... };
declare export function toCXS(raw: {
  [CSSProp: string]: string | number | { ... },
  ...
}): {
  [CSSProp: string]: string,
  ...
};
declare export function getValue<A>(
  context: {
    [key: string]: any,
    ...
  } | void,
  property: $Keys<ConfigDefaults>,
  override?: A
): A;
declare export function getValues<C: { ... }, D: { ... }>(
  context?: C,
  overrides?: D
): ConfigDefaults;
declare export function accumulateOver(
  props: Array<string>
): (acc: any, current: any) => any;
declare var _default: {
  accumulateOver: typeof accumulateOver,
  combineSpacing: typeof combineSpacing,
  getCSS: typeof getCSS,
  getValue: typeof getValue,
  getValues: typeof getValues,
  noop: Noop,
  parseSpacing: typeof parseSpacing,
  replaceSpacingAliases: typeof replaceSpacingAliases,
  splitPattern: RegExp,
  times: (n: number) => any[],
  toCXS: typeof toCXS,
  validateSpacingProps: typeof validateSpacingProps,
  ...
};
declare export default typeof _default;
