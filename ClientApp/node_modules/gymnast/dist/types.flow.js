/**
 * Flowtype definitions for types
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.10.0
 * @flow
 */

export type Noop = (...params: any[]) => null;
export type Size = string | number | void;
export type AlignValues = "start" | "center" | "end" | void;
export type SpacingValues = number | string | void;
export type DisplayValues = string | Array<string>;
export type DirectionValues = "row" | "column";
export type Spacing = Array<SpacingValues> | SpacingValues;
export type SpacingProps = {
  padding?: Spacing,
  paddingTop?: SpacingValues,
  paddingRight?: SpacingValues,
  paddingBottom?: SpacingValues,
  paddingLeft?: SpacingValues,
  margin?: Spacing,
  marginTop?: SpacingValues,
  marginRight?: SpacingValues,
  marginBottom?: SpacingValues,
  marginLeft?: SpacingValues,
  ...
};
export type SpacingAliases = {
  [spacingAlias: string]: number,
  ...
};
declare type DisplayProperties = {
  [resolutionKey: string]: string,
  ...
};
export type DisplayAliases = {
  [displayAlias: string]: DisplayProperties | Array<DisplayProperties>,
  ...
};
export interface GymnastContextType {
  base?: number;
  columns?: number;
  displayAliases?: DisplayAliases;
  gutter?: number;
  spacingAliases?: SpacingAliases;
  verticalGutter?: number;
}
export type OneResolutionGrid = {
  align?: AlignValues,
  base?: number,
  className?: string,
  direction?: DirectionValues,
  justify?: AlignValues,
  margin?: Spacing,
  marginBottom?: SpacingValues,
  marginLeft?: SpacingValues,
  marginRight?: SpacingValues,
  marginTop?: SpacingValues,
  padding?: Spacing,
  paddingBottom?: SpacingValues,
  paddingLeft?: SpacingValues,
  paddingRight?: SpacingValues,
  paddingTop?: SpacingValues,
  show?: DisplayValues,
  size?: Size,
  style?: React$CSSProperties,
  ...
};
export type GridProps = {
  align?:
    | AlignValues
    | {
        [resolution: string]: AlignValues,
        ...
      },
  className?: string,
  direction?:
    | DirectionValues
    | {
        [resolution: string]: DirectionValues,
        ...
      },
  justify?:
    | AlignValues
    | {
        [resolution: string]: AlignValues,
        ...
      },
  margin?:
    | Spacing
    | {
        [resolution: string]: Spacing,
        ...
      },
  marginBottom?:
    | SpacingValues
    | {
        [resolution: string]: SpacingValues,
        ...
      },
  marginLeft?:
    | SpacingValues
    | {
        [resolution: string]: SpacingValues,
        ...
      },
  marginRight?:
    | SpacingValues
    | {
        [resolution: string]: SpacingValues,
        ...
      },
  marginTop?:
    | SpacingValues
    | {
        [resolution: string]: SpacingValues,
        ...
      },
  padding?:
    | Spacing
    | {
        [resolution: string]: Spacing,
        ...
      },
  paddingBottom?:
    | SpacingValues
    | {
        [resolution: string]: SpacingValues,
        ...
      },
  paddingLeft?:
    | SpacingValues
    | {
        [resolution: string]: SpacingValues,
        ...
      },
  paddingRight?:
    | SpacingValues
    | {
        [resolution: string]: SpacingValues,
        ...
      },
  paddingTop?:
    | SpacingValues
    | {
        [resolution: string]: SpacingValues,
        ...
      },
  show?: DisplayValues,
  size?:
    | Size
    | {
        [resolution: string]: Size,
        ...
      },
  style?: React$CSSProperties,
  ...
};
declare type Omit<T, K: $Keys<T>> = Pick<T, Exclude<$Keys<T>, K>>;
declare type DivProps = Omit<
  $PropertyType<JSX.IntrinsicElements, "div">,
  "onAuxClick" | "onAuxClickCapture"
>;
export type GridDivProps = $Rest<DivProps & GridProps, { ... }>;
export type ConfigDefaults = {
  gutter: number,
  verticalGutter: number,
  base: number,
  ...
} & GymnastContextType;
export type Logger = {
  info: (...args: any[]) => void,
  warn: (...args: any[]) => void,
  error: (...args: any[]) => void,
  ...
};
